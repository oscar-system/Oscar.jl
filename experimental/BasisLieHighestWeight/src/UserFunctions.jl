@doc """
```jldoctest
julia> BasisLieHighestWeight.basis_lie_highest_weight_operators(:B, 2)
4-element Vector{Tuple{Int64, Vector{QQFieldElem}}}:
 (1, [1, 0])
 (2, [0, 1])
 (3, [1, 1])
 (4, [1, 2])
```
"""
function basis_lie_highest_weight_operators(type::Symbol, rank::Int)
  L = lie_algebra(type, rank)
  chevalley_basis = chevalley_basis_gap(L)
  operators = chevalley_basis[1]  # TODO: change to [2]
  weights_alpha = [w_to_alpha(L, weight(L, op)) for op in operators]
  return collect(enumerate(weights_alpha))
end

@doc """
basis_lie_highest_weight(
    type::Symbol,
    rank::Int,
    highest_weight::Vector{Int},
    birational_sequence::Union{String, Vector{Union{Int, Vector{Int}}}};
    monomial_ordering::Symbol = :degrevlex,
)

Computes a monomial basis for the highest weight module with highest weight
``highest_weight`` (in terms of the fundamental weights), for a simple Lie algebra of type
``type`` and rank ``rank``.

# Parameters
- `type`: type of liealgebra we want to investigate, one of :A, :B, :C, :D, :E, :F, :G
- `rank`: rank of liealgebra
- `highest_weight`: highest-weight
- `birational_sequence`: list of operators
- `monomial_ordering`: monomial order in which our basis gets defined with regards to our operators.
                       If this is a weighted ordering, the height of the corresponding root is used as weight.

# Examples
```jldoctest
julia> base = BasisLieHighestWeight.basis_lie_highest_weight(:A, 2, [1, 1])
Monomial basis of a highest weight module
  of highest weight [1, 1]
  of dimension 8
  with monomial ordering degrevlex([x1, x2, x3])
over Lie Algebra of type A2
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [1, 0]
    [0, 1]
    [1, 1]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0]
    [0, 1]

julia> base = BasisLieHighestWeight.basis_lie_highest_weight(:A, 3, [2, 2, 3]; monomial_ordering = :lex)
Monomial basis of a highest weight module
  of highest weight [2, 2, 3]
  of dimension 1260
  with monomial ordering lex([x1, x2, x3, x4, x5, x6])
over Lie Algebra of type A3
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
    [1, 1, 0]
    [0, 1, 1]
    [1, 1, 1]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]

julia> base = BasisLieHighestWeight.basis_lie_highest_weight(:A, 2, [1, 0], [1,2,1])
Monomial basis of a highest weight module
  of highest weight [1, 0]
  of dimension 3
  with monomial ordering degrevlex([x1, x2, x3])
over Lie Algebra of type A2
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [1, 0]
    [0, 1]
    [1, 0]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0]

julia> base = BasisLieHighestWeight.basis_lie_highest_weight(:A, 2, [1, 0], [[1,0], [0,1], [1,0]])
Monomial basis of a highest weight module
  of highest weight [1, 0]
  of dimension 3
  with monomial ordering degrevlex([x1, x2, x3])
over Lie Algebra of type A2
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [1, 0]
    [0, 1]
    [1, 0]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0]

julia> base = BasisLieHighestWeight.basis_lie_highest_weight(:C, 3, [1, 1, 1]; monomial_ordering = :lex)
Monomial basis of a highest weight module
  of highest weight [1, 1, 1]
  of dimension 512
  with monomial ordering lex([x1, x2, x3, x4, x5, x6, x7, x8, x9])
over Lie Algebra of type C3
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
    [1, 1, 0]
    [0, 1, 1]
    [1, 1, 1]
    [0, 2, 1]
    [1, 2, 1]
    [2, 2, 1]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
    [0, 1, 1]
    [1, 1, 1]
```
"""
function basis_lie_highest_weight(
  type::Symbol, rank::Int, highest_weight::Vector{Int}; monomial_ordering::Symbol=:degrevlex
)
  L = lie_algebra(type, rank)
  chevalley_basis = chevalley_basis_gap(L)
  operators = chevalley_basis[1] # TODO: change to [2]
  return basis_lie_highest_weight_compute(
    L, chevalley_basis, highest_weight, operators, monomial_ordering
  )
end

function basis_lie_highest_weight(
  type::Symbol,
  rank::Int,
  highest_weight::Vector{Int},
  birational_sequence::Vector{Int};
  monomial_ordering::Symbol=:degrevlex,
)
  L = lie_algebra(type, rank)
  chevalley_basis = chevalley_basis_gap(L)
  operators = operators_by_index(L, chevalley_basis, birational_sequence)
  return basis_lie_highest_weight_compute(
    L, chevalley_basis, highest_weight, operators, monomial_ordering
  )
end

function basis_lie_highest_weight(
  type::Symbol,
  rank::Int,
  highest_weight::Vector{Int},
  birational_sequence::Vector{Vector{Int}};
  monomial_ordering::Symbol=:degrevlex,
)
  L = lie_algebra(type, rank)
  chevalley_basis = chevalley_basis_gap(L)
  operators = operators_by_simple_roots(L, chevalley_basis, birational_sequence)
  return basis_lie_highest_weight_compute(
    L, chevalley_basis, highest_weight, operators, monomial_ordering
  )
end

@doc """
# Examples
```jldoctest
julia> base = BasisLieHighestWeight.basis_lie_highest_weight_lusztig(:D, 4, [1,1,1,1], [4,3,2,4,3,2,1,2,4,3,2,1])
Monomial basis of a highest weight module
  of highest weight [1, 1, 1, 1]
  of dimension 4096
  with monomial ordering wdegrevlex([x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12], [1, 1, 3, 2, 2, 1, 5, 4, 3, 3, 2, 1])
over Lie Algebra of type D4
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [0, 0, 0, 1]
    [0, 0, 1, 0]
    [0, 1, 1, 1]
    [0, 1, 1, 0]
    [0, 1, 0, 1]
    [0, 1, 0, 0]
    [1, 2, 1, 1]
    [1, 1, 1, 1]
    [1, 1, 0, 1]
    [1, 1, 1, 0]
    [1, 1, 0, 0]
    [1, 0, 0, 0]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0, 0, 0]
    [0, 1, 0, 0]
    [0, 0, 1, 0]
    [0, 0, 0, 1]
    [0, 0, 1, 1]
```
"""
function basis_lie_highest_weight_lusztig(
  type::Symbol, rank::Int, highest_weight::Vector{Int}, reduced_expression::Vector{Int}
)
  """
  lusztig polytope
  BasisLieHighestWeight.basis_lie_highest_weight_lusztig(:D, 4, [1,1,1,1], [4,3,2,4,3,2,1,2,4,3,2,1])
  """
  # operators = some sequence of the String / Littelmann-Berenstein-Zelevinsky polytope
  monomial_ordering = :wdegrevlex
  L = lie_algebra(type, rank)
  chevalley_basis = chevalley_basis_gap(L)
  operators = operators_lusztig(L, chevalley_basis, reduced_expression)
  return basis_lie_highest_weight_compute(
    L, chevalley_basis, highest_weight, operators, monomial_ordering
  )
end

@doc """
# Examples
```jldoctest
julia> BasisLieHighestWeight.basis_lie_highest_weight_string(:B, 3, [1,1,1], [3,2,3,2,1,2,3,2,1])
Monomial basis of a highest weight module
  of highest weight [1, 1, 1]
  of dimension 512
  with monomial ordering neglex([x1, x2, x3, x4, x5, x6, x7, x8, x9])
over Lie Algebra of type B3
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [0, 0, 1]
    [0, 1, 0]
    [0, 0, 1]
    [0, 1, 0]
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
    [0, 1, 0]
    [1, 0, 0]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
```
"""
function basis_lie_highest_weight_string(
  type::Symbol, rank::Int, highest_weight::Vector{Int}, reduced_expression::Vector{Int}
)
  """
  String / Littelmann-Berenstein-Zelevinsky polytope
  BasisLieHighestWeight.basis_lie_highest_weight_string(:B, 3, [1,1,1], [3,2,3,2,1,2,3,2,1])
  BasisLieHighestWeight.basis_lie_highest_weight_string(:B, 4, [1,1,1,1], [4,3,4,3,2,3,4,3,2,1,2,3,4,3,2,1])
  BasisLieHighestWeight.basis_lie_highest_weight_string(:A, 4, [1,1,1,1], [4,3,2,1,2,3,4,3,2,3])
  """
  # reduced_expression = some sequence of the String / Littelmann-Berenstein-Zelevinsky polytope
  monomial_ordering = :neglex
  L = lie_algebra(type, rank)
  chevalley_basis = chevalley_basis_gap(L)
  operators = operators_by_index(L, chevalley_basis, reduced_expression)
  return basis_lie_highest_weight_compute(
    L, chevalley_basis, highest_weight, operators, monomial_ordering
  )
end

@doc """
# Examples
```jldoctest
julia> BasisLieHighestWeight.basis_lie_highest_weight_pbw(:A, 3, [1,1,1])
Monomial basis of a highest weight module
  of highest weight [1, 1, 1]
  of dimension 64
  with monomial ordering neglex([x1, x2, x3, x4, x5, x6])
over Lie Algebra of type A3
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [1, 1, 1]
    [0, 1, 1]
    [1, 1, 0]
    [0, 0, 1]
    [0, 1, 0]
    [1, 0, 0]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
```
"""
function basis_lie_highest_weight_pbw(type::Symbol, rank::Int, highest_weight::Vector{Int})
  """
  Feigin-Fourier-Littelmann-Vinberg polytope
  BasisLieHighestWeight.basis_lie_highest_weight_pbw(:A, 3, [1,1,1])
  """
  monomial_ordering = :neglex
  L = lie_algebra(type, rank)
  chevalley_basis = chevalley_basis_gap(L)
  operators = reverse(chevalley_basis[1]) # TODO: change to [2]
  return basis_lie_highest_weight_compute(
    L, chevalley_basis, highest_weight, operators, monomial_ordering
  )
end

@doc """
# Examples
```jldoctest
julia> BasisLieHighestWeight.basis_lie_highest_weight_nz(:C, 3, [1,1,1], [3,2,3,2,1,2,3,2,1])
Monomial basis of a highest weight module
  of highest weight [1, 1, 1]
  of dimension 512
  with monomial ordering degrevlex([x1, x2, x3, x4, x5, x6, x7, x8, x9])
over Lie Algebra of type C3
  where the birational sequence used consists of operators to the following weights (given as coefficients w.r.t. alpha_i):
    [0, 0, 1]
    [0, 1, 0]
    [0, 0, 1]
    [0, 1, 0]
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
    [0, 1, 0]
    [1, 0, 0]
  and the basis was generated by Minkowski sums of the bases of the following highest weight modules:
    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
```
"""
function basis_lie_highest_weight_nz(
  type::Symbol, rank::Int, highest_weight::Vector{Int}, reduced_expression::Vector{Int}
)
  """
  Nakashima-Zelevinsky polytope
  BasisLieHighestWeight.basis_lie_highest_weight_nz(:C, 3, [1,1,1], [3,2,3,2,1,2,3,2,1])
  BasisLieHighestWeight.basis_lie_highest_weight_nz(:A, 4, [1,1,1,1], [4,3,2,1,2,3,4,3,2,3])
  """
  monomial_ordering = :degrevlex
  L = lie_algebra(type, rank)
  chevalley_basis = chevalley_basis_gap(L)
  operators = operators_by_index(L, chevalley_basis, reduced_expression)
  return basis_lie_highest_weight_compute(
    L, chevalley_basis, highest_weight, operators, monomial_ordering
  )
end
