{
    "arxiv_data": {
        "id": "1507.05954",
        "doi": "10.48550/arXiv.1507.05954",
        "version": "2",
        "discipline": "hep-th",
        "link": "https://arxiv.org/abs/2507.05954v2",
        "model_location": {
            "section": "A",
            "equation": "A.1",
            "page": "71"
        }
    },
    "journal_data": {
        "doi": "10.1007/JHEP11(2015)204",
        "report_numbers": ["UPR-1274-T", "CERN-PH-TH-2015-157", "MIT-CTP-4678"],
        "journal": "JHEP",
        "volume": "11",
        "pages": "204",
        "year": "2015",
        "link": "https://link.springer.com/article/10.1007/JHEP11(2015)204",
        "model_location": {
            "section": "",
            "equation": "",
            "page": ""
        }
    },
    "paper_metadata": {
        "authors": [
            "Mirjam Cvetič",
            "Denis Klevers",
            "Hernan Piragua",
            "Washington Taylor"
        ],
        "title": "General U(1)×U(1) F-theory compactifications and beyond: geometry of unHiggsings and novel matter structure",
        "description": "General construction of U(1)xU(1) model",
        "buzzwords": ["U(1)", "Mordell–Weil", "rational sections"]
    },
    "model_descriptors": {
        "type": "weierstrass",
        "description": "U(1)xU(1) Weierstrass model",
        "gauge_algebra": ["u1", "u1"]
    },
    "model_data": {
        "base_dim": 2,
        "base_coordinates": [
            "Kbar",
            "s1",
            "s2",
            "s3",
            "s5",
            "s6",
            "s8",
            "a1",
            "a2",
            "a3",
            "b1",
            "b2",
            "b3"
        ],
        "f": "-1//3 * (a3^2 * b1^2 * b2^2 + a2^2 * b1^2 * b3^2 + a1^2 * b2^2 * b3^2) * (s2^2 - 3 * s1 * s3) + 1//6 * (a2 * a3^2 * b1^2 * b2 + a1 * a3^2 * b1 * b2^2 + a2^2 * a3 * b1^2 * b3 + a1^2 * a3 * b2^2 * b3 + a1 * a2^2 * b1 * b3^2 + a1^2 * a2 * b2 * b3^2) * (2 * s2 * s5 - 3 * s1 * s6) + 1//2 * b1 * b2 * b3 * s3 * (2 * s3 * s5 - s2 * s6) - 1//3 * (a2^2 * a3^2 * b1^2 - a1 * a2 * a3^2 * b1 * b2 + a1^2 * a3^2 * b2^2 - a1 * a2^2 * a3 * b1 * b3 - a1^2 * a2 * a3 * b2 * b3 + a1^2 * a2^2 * b3^2) * (s5^2 - 3 * s1 * s8) - 1//48 * (s6^2 - 4 * s3 * s8)^2 + a1 * a2 * a3 * (b1 * b2 * b3 * (-2 * s2 * s5 + 3 * s1 * s6) - 1//2 * s5 * s6 * s8 + s2 * s8^2) + 1//6 * (a3 * b1 * b2 + a2 * b1 * b3 + a1 * b2 * b3) * (s2 * s6^2 + s3 * (-3 * s5 * s6 + 2 * s2 * s8)) + 1//6 * (a2 * a3 * b1 + a1 * a3 * b2 + a1 * a2 * b3) * (2 * b1 * b2 * b3 * (s2^2 - 3 * s1 * s3) - 3 * s2 * s6 * s8 + s5 * (s6^2 + 2 * s3 * s8))",
        "g": "-1//2 * (a1 * a2 * a3^4 * b1^3 * b2^3 + a1 * a2^4 * a3 * b1^3 * b3^3 + a1^4 * a2 * a3 * b2^3 * b3^3) * s1^2 + 1//4 * (a2^2 * a3^4 * b1^4 * b2^2 + a1^2 * a3^4 * b1^2 * b2^4 + a2^4 * a3^2 * b1^4 * b3^2 + a1^4 * a3^2 * b2^4 * b3^2 + a1^2 * a2^4 * b1^2 * b3^4 + a1^4 * a2^2 * b2^2 * b3^4) * s1^2 + 1//27 * (a3^3 * b1^3 * b2^3 + a2^3 * b1^3 * b3^3 + a1^3 * b2^3 * b3^3) * s2 * (-2 * s2^2 + 9 * s1 * s3) + 1//18 * (a2 * a3^3 * b1^3 * b2^2 + a1 * a3^3 * b1^2 * b2^3 + a2^3 * a3 * b1^3 * b3^2 + a1^3 * a3 * b2^3 * b3^2 + a1 * a2^3 * b1^2 * b3^3 + a1^3 * a2 * b2^2 * b3^3) * ((2 * s2^2 - 3 * s1 * s3) * s5 - 3 * s1 * s2 * s6) + 1//864 * (s6^2 - 4 * s3 * s8)^3 + 1//18 * (a1 * a2^2 * a3^3 * b1^2 * b2 + a1^2 * a2 * a3^3 * b1 * b2^2 + a1 * a2^3 * a3^2 * b1^2 * b3 + a1^3 * a2 * a3^2 * b2^2 * b3 + a1^2 * a2^3 * a3 * b1 * b3^2 + a1^3 * a2^2 * a3 * b2 * b3^2) * (9 * b1 * b2 * b3 * s1^2 + 2 * s5^3 - 9 * s1 * s5 * s8) + 1//72 * (a2 * a3^2 * b1^2 * b2 + a1 * a3^2 * b1 * b2^2 + a2^2 * a3 * b1^2 * b3 + a1^2 * a3 * b2^2 * b3 + a1 * a2^2 * b1 * b3^2 + a1^2 * a2 * b2 * b3^2) * (4 * b1 * b2 * b3 * s2 * (2 * s2^2 - 9 * s1 * s3) + s6 * (-12 * s3 * s5^2 + s6 * (2 * s2 * s5 + 3 * s1 * s6)) + 4 * (s2 * s3 * s5 - 3 * (s2^2 - 5 * s1 * s3) * s6) * s8) + 1//18 * (a2^2 * a3^3 * b1^3 * b2 + a1^2 * a3^3 * b1 * b2^3 + a2^3 * a3^2 * b1^3 * b3 + a1^3 * a3^2 * b2^3 * b3 + a1^2 * a2^3 * b1 * b3^3 + a1^3 * a2^2 * b2 * b3^3) * (-3 * s1 * s5 * s6 + s2 * (2 * s5^2 - 3 * s1 * s8)) + 2//9 * (a1 * a2 * a3^3 * b1^2 * b2^2 + a1 * a2^3 * a3 * b1^2 * b3^2 + a1^3 * a2 * a3 * b2^2 * b3^2) * (3 * s1 * s5 * s6 + s2 * (-2 * s5^2 + 3 * s1 * s8)) + a1^2 * a2^2 * a3^2 * (-3//2 * b1^2 * b2^2 * b3^2 * s1^2 + 1//4 * s8^2 * (s5^2 - 4 * s1 * s8) + 2//9 * b1 * b2 * b3 * s5 * (-2 * s5^2 + 9 * s1 * s8)) + 1//36 * (a3^2 * b1^2 * b2^2 + a2^2 * b1^2 * b3^2 + a1^2 * b2^2 * b3^2) * (2 * s2^2 * s6^2 + 3 * s3^2 * (3 * s5^2 - 8 * s1 * s8) + s3 * (-3 * s6 * (2 * s2 * s5 + s1 * s6) + 4 * s2^2 * s8)) + 1//24 * b1 * b2 * b3 * s3 * (6 * b1 * b2 * b3 * s3 * (s2^2 - 4 * s1 * s3) + (-2 * s3 * s5 + s2 * s6) * (s6^2 - 4 * s3 * s8)) + 1//36 * (a1 * a2 * a3^2 * b1 * b2 + a1 * a2^2 * a3 * b1 * b3 + a1^2 * a2 * a3 * b2 * b3) * (4 * b1 * b2 * b3 * ((2 * s2^2 - 3 * s1 * s3) * s5 - 3 * s1 * s2 * s6) + 18 * s2 * s5 * s6 * s8 - 33 * s1 * s6^2 * s8 - 6 * (s2^2 + 2 * s1 * s3) * s8^2 + s5^2 * (s6^2 + 2 * s3 * s8)) - 1//54 * (a2^3 * a3^3 * b1^3 + a1^3 * a3^3 * b2^3 + a1^3 * a2^3 * b3^3) * (4 * s5^3 + 9 * s1 * (3 * b1 * b2 * b3 * s1 - 2 * s5 * s8)) + 1//72 * a1 * a2 * a3 * (16 * b1^2 * b2^2 * b3^2 * s2 * (-2 * s2^2 + 9 * s1 * s3) + 3 * s8 * (s5 * s6 - 2 * s2 * s8) * (s6^2 - 4 * s3 * s8) + 6 * b1 * b2 * b3 * (s6 * (6 * s3 * s5^2 + s6 * (-8 * s2 * s5 + 9 * s1 * s6)) + 2 * (-8 * s2 * s3 * s5 + 3 * (s2^2 + 2 * s1 * s3) * s6) * s8)) + 1//18 * (a1 * a2^2 * a3^2 * b1 + a1^2 * a2 * a3^2 * b2 + a1^2 * a2^2 * a3 * b3) * (-3 * s8 * (s5^2 * s6 + (s2 * s5 - 6 * s1 * s6) * s8) + 2 * b1 * b2 * b3 * (-3 * s1 * s5 * s6 + s2 * (2 * s5^2 - 3 * s1 * s8))) - 1//72 * (a3 * b1 * b2 + a2 * b1 * b3 + a1 * b2 * b3) * (12 * b1 * b2 * b3 * s3 * (s2 * s3 * s5 + (s2^2 -  6 * s1 * s3) * s6) + (s6^2 - 4 * s3 * s8) * (s2 * s6^2 + s3 * (-3 * s5 * s6 + 2 * s2 * s8))) + 1//72 * (a2 * a3 * b1 + a1 * a3 * b2 + a1 * a2 * b3) * (2 * b1 * b2 * b3 * (s2^2 * s6^2 - 6 * s3^2 * (s5^2 + 2 * s1 * s8) + s3 * (18 * s2 * s5 * s6 - 33 * s1 * s6^2 + 2 * s2^2 * s8)) - (s6^2 - 4 * s3 * s8) * (-3 * s2 * s6 * s8 + s5 * (s6^2 + 2 * s3 * s8))) + 1//36 * (a2^2 * a3^2 * b1^2 + a1^2 * a3^2 * b2^2 + a1^2 * a2^2 * b3^2) * (8 * b1 * b2 * b3 * (-2 * s2^2 * s5 + 3 * s1 * s3 * s5 + 3 * s1 * s2 * s6) - 6 * s2 * s5 * s6 * s8 + 2 * s5^2 * (s6^2 + 2 * s3 * s8) - 3 * s8 * (-3 * s2^2 * s8 + s1 * (s6^2 + 8 * s3 * s8)))",
        "auxiliary_base_grading": [
            [1, 6, 4, 2, 3, 1, 0, 0, 0, 0, -1, -1, -1],
            [0, -3, -2, -1, -1, 0, 1, 0, 0, 0, 1, 1, 1],
            [0, -2, -1, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0],
            [0, -2, -1, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0],
            [0, -2, -1, 0, -1, 0, 0, 0, 0, 1, 0, 0, 1]
        ],
        "generating_sections": [
            [
                "1//12 * (-4 * a2^3 * b1^2 * (b1 * b3 * s2 + a3 * b1 * s5 - 2 * a1 * b3 * s5) + a2^2 * (b1 * (4 * a1 * b2 * b3 * (b1 * s2 - 4 * a1 * s5) + 4 * a3 * b1 * b2 * (2 * b1 * s2 + a1 * s5) + b1 * s6^2) + 4 * b1 * (2 * b1 * s3 - 3 * a1 * s6) * s8 + 12 * a1^2 * s8^2) + b2^2 * (12 * b1^2 * s3^2 - 4 * a1^3 * b2 * (b3 * s2 + a3 * s5) - 12 * a1 * b1 * s3 * s6 + a1^2 * (8 * a3 * b1 * b2 * s2 + s6^2 + 8 * s3 * s8)) + 2 * a2 * b2 * (4 * a1^3 * b2 * b3 * s5 - 6 * b1^2 * s3 * s6 + a1 * b1 * (-8 * a3 * b1 * b2 * s2 + 5 * s6^2 + 4 * s3 * s8) + 2 * a1^2 * (b1 * b2 * b3 * s2 + a3 * b1 * b2 * s5 - 3 * s6 * s8)))",
                "1//2 * (a2^5 * b1^4 * b3 * s1 * (a3 * b1 - a1 * b3) + a2^4 * b1^2 * (-b1 * (a3^2 * b1^2 * b2 * s1 + 3 * a1 * a3 * b1 * b2 * b3 * s1 + b3 * (b1 * s3 * s5 - a1 * (4 * a1 * b2 * b3 * s1 + s5 * s6))) + (a1 * b3 * (b1 * s2 - 2 * a1 * s5) + a3 * b1 * (-b1 * s2 + a1 * s5)) * s8) + b2^3 * (a1^5 * a3 * b2^2 * b3 * s1 - 2 * b1^3 * s3^3 + 3 * a1 * b1^2 * s3^2 * s6 - a1^4 * b2 * (a3^2 * b1 * b2 * s1 + b3 * s3 * s5 + a3 * s2 * s8) - a1^2 * b1 * s3 * (2 * a3 * b1 * b2 * s2 + s6^2 + 2 * s3 * s8) + a1^3 * (b1 * b2 * (b3 * s2 * s3 + a3 * s3 * s5 + a3 * s2 * s6) + s3 * s6 * s8)) + a2^3 * (b1^3 * (b1 * b2 * (b3 * s2 * s3 + a3 * s3 * s5 + a3 * s2 * s6) + s3 * s6 * s8) + a1 * b1^2 * (2 * b1 * b2 * (2 * a3^2 * b1 * b2 * s1 + b3 * s3 * s5 - (b3 * s2 + a3 * s5) * s6) + (2 * a3 * b1 * b2 * s2 - s6^2) * s8 - 2 * s3 * s8^2) + a1^2 * b1 * (b1 * b2 * b3 * (2 * a3 * b1 * b2 * s1 - s5 * s6) - b1 * b2 * (b3 * s2 + a3 * s5) * s8 + 3 * s6 * s8^2) - 2 * a1^3 * (3 * b1^2 * b2^2 * b3^2 * s1 - 2 * b1 * b2 * b3 * s5 * s8 + s8^3)) + a2^2 * b2 * (-b1^3 * s3 * (2 * a3 * b1 * b2 * s2 + s6^2 + 2 * s3 * s8) + 2 * a1^4 * b2 * b3 * (2 * b1 * b2 * b3 * s1 - s5 * s8) - 2 * a1^2 * b1 * (b1 * b2 * (3 * a3^2 * b1 * b2 * s1 + b3 * s3 * s5 - 2 * (b3 * s2 + a3 * s5) * s6) + (a3 * b1 * b2 * s2 + 2 * s6^2) * s8 + s3 * s8^2) + a1^3 * (b1 * b2 * b3 * (2 * a3 * b1 * b2 * s1 - s5 * s6) - b1 * b2 * (b3 * s2 + a3 * s5) * s8 + 3 * s6 * s8^2) - a1 * b1^2 * (b1 * b2 * (b3 * s2 * s3 + a3 * s3 * s5 + a3 * s2 * s6) - s6 * (s6^2 + 5 * s3 * s8))) - a2 * b2^2 * (a1^5 * b2^2 * b3^2 * s1 - 3 * b1^3 * s3^2 * s6 + 2 * a1 * b1^2 * s3 * (-2 * a3 * b1 * b2 * s2 + 2 * s6^2 + s3 * s8) + a1^3 * (2 * b1 * b2 * (-2 * a3^2 * b1 * b2 * s1 - b3 * s3 * s5 + b3 * s2 * s6 + a3 * s5 * s6) + (-2 * a3 * b1 * b2 * s2 + s6^2) * s8 + 2 * s3 * s8^2) + a1^2 * b1 * (b1 * b2 * (b3 * s2 * s3 + a3 * s3 * s5 + a3 * s2 * s6) - s6 * (s6^2 + 5 * s3 * s8)) + a1^4 * b2 * (-b3 * (s5 * s6 + s2 * s8) + a3 * (3 * b1 * b2 * b3 * s1 - s5 * s8))))",
                "-a2 * b1 + a1 * b2"
            ],
            [
                "1//12 * (-4 * a3^3 * b1^2 * (b1 * b2 * s2 + a2 * b1 * s5 - 2 * a1 * b2 * s5) + a3^2 * (b1 * (4 * a1 * b2 * b3 * (b1 * s2 - 4 * a1 * s5) + 4 * a2 * b1 * b3 * (2 * b1 * s2 + a1 * s5) + b1 * s6^2) + 4 * b1 * (2 * b1 * s3 - 3 * a1 * s6) * s8 + 12 * a1^2 * s8^2) + b3^2 * (12 * b1^2 * s3^2 - 4 * a1^3 * b3 * (b2 * s2 + a2 * s5) - 12 * a1 * b1 * s3 * s6 + a1^2 * (8 * a2 * b1 * b3 * s2 + s6^2 + 8 * s3 * s8)) + 2 * a3 * b3 * (4 * a1^3 * b2 * b3 * s5 - 6 * b1^2 * s3 * s6 + a1 * b1 * (-8 * a2 * b1 * b3 * s2 + 5 * s6^2 + 4 * s3 * s8) + 2 * a1^2 * (b1 * b2 * b3 * s2 + a2 * b1 * b3 * s5 - 3 * s6 * s8)))",
                "1//2 * (a1^5 * a3 * b2^2 * b3^4 * s1 + a2^2 * b1 * b3 * (a3 * b1 - a1 * b3)^4 * s1 - a1^4 * b2 * b3^2 * (-b3^2 * s3 * s5 + a3 * b3 * (s5 * s6 + s2 * s8) + a3^2 * (4 * b1 * b2 * b3 * s1 - 2 * s5 * s8)) + b1^3 * s3 * (2 * b3^3 * s3^2 + a3^4 * b1 * b2 * s5 - 3 * a3 * b3^2 * s3 * s6 + a3^2 * b3 * (s6^2 + 2 * s3 * s8) - a3^3 * (b1 * b2 * b3 * s2 + s6 * s8)) + a1^3 * (-b3^3 * s3 * (b1 * b2 * b3 * s2 + s6 * s8) + 2 * a3^3 * (3 * b1^2 * b2^2 * b3^2 * s1 - 2 * b1 * b2 * b3 * s5 * s8 + s8^3) + a3^2 * b3 * (-3 * s6 * s8^2 + b1 * b2 * b3 * (s5 * s6 + s2 * s8)) + a3 * b3^2 * (2 * b1 * b2 * b3 * (-s3 * s5 + s2 * s6) + s8 * (s6^2 + 2 * s3 * s8))) + a1 * b1^2 * (a3^5 * b1^2 * b2^2 * s1 - 3 * b3^3 * s3^2 * s6 - a3^4 * b1 * b2 * (s5 * s6 + s2 * s8) + 2 * a3 * b3^2 * s3 * (2 * s6^2 + s3 * s8) + a3^3 * (2 * b1 * b2 * b3 * (-s3 * s5 + s2 * s6) + s8 * (s6^2 + 2 * s3 * s8)) + a3^2 * b3 * (b1 * b2 * b3 * s2 * s3 - s6 * (s6^2 + 5 * s3 * s8))) + a1^2 * b1 * (b3^3 * s3 * (s6^2 + 2 * s3 * s8) + 2 * a3^4 * b1 * b2 * (-2 * b1 * b2 * b3 * s1 + s5 * s8) + a3^3 * (-3 * s6 * s8^2 + b1 * b2 * b3 * (s5 * s6 + s2 * s8)) + 2 * a3^2 * b3 * (b1 * b2 * b3 * (s3 * s5 - 2 * s2 * s6) + s8 * (2 * s6^2 + s3 * s8)) + a3 * b3^2 * (b1 * b2 * b3 * s2 * s3 - s6 * (s6^2 + 5 * s3 * s8))) - a2 * (a3 * b1 - a1 * b3)^2 * (a3^3 * b1^3 * b2 * s1 - a3^2 * b1 * (a1 * b1 * b2 * b3 * s1 + b1 * s2 * s8 - a1 * s5 * s8) + b3^2 * (-2 * b1^2 * s2 * s3 + a1 * (a1^2 * b2 * b3 * s1 + b1 * s3 * s5 + b1 * s2 * s6 - a1 * s2 * s8)) + a3 * b3 * (-2 * a1 * b1 * s5 * s6 + b1^2 * (s3 * s5 + s2 * s6) + a1^2 * (-b1 * b2 * b3 * s1 + s5 * s8))))",
                "-a3 * b1 + a1 * b3"
            ]
        ]
    },
    "associated_models": ["model1507_05954-1.json"]
}
