module GrpCoh

using Oscar
import Oscar:action
import AbstractAlgebra: Group, Module
import Base: parent

@attributes mutable struct GModule{gT,mT}
  G::gT
  M::mT
  ac::Vector{Map} # automorphisms of M, one for each generator of G

  function GModule(M, G::T, ac::Vector{<:Map}) where {T <: Oscar.GAPGroup}
    r = new{T,typeof(M)}()
    r.G = G
    r.ac = ac
    r.M = M
    @assert all(x -> domain(x) == codomain(x) == r.M, ac)
    return r
  end


  function GModule(G::T, ac::Vector{<:Map}) where {T <: Oscar.GAPGroup}
    return GModule(domain(ac[1]), G, ac)
  end

  F::Group # G as an Fp-group (if set)
  mF::GAPGroupHomomorphism  # F -> G, maps F[i] to G[i]

  iac::Vector{Map} # the inverses of ac
end

function Base.show(io::IO, C::GModule)
  print(io, C.G, " acting on ", C.M, "\nvia: ", C.ac)
end

"""
Compute an fp-presentation of the group generated by 'g'
and returns both the group and the map from the new group to the
parent of the generators.
"""
function fp_group(g::Vector{<:Oscar.GAPGroupElem})
  G = parent(g[1])
  @assert all(x->parent(x) == G, g)
  X = GAP.Globals.IsomorphismFpGroupByGenerators(G.X, GAP.Globals.GeneratorsOfGroup(G.X))
  F = FPGroup(GAP.Globals.Range(X))
  return F, GAPGroupHomomorphism(F, G, GAP.Globals.InverseGeneralMapping(X))
end

"""
For an element of an fp-group, return a corresponding word as a sequence
of integers. A positive integers indicates the corresponding generator, 
a negative one the inverse.
"""
function word(y::FPGroupElem)
  z = GAP.Globals.UnderlyingElement(y.X)
  return map(Int, GAP.Globals.LetterRepAssocWord(z))
end

"""
The relations defining 'F' as an array of pairs.
"""
function Oscar.relations(F::FPGroup)
  R = relators(F)
  z = one(free_group(F))
  return [(x, z) for x = R]
end

function Oscar.relations(G::Oscar.GAPGroup)
   f = GAP.Globals.IsomorphismFpGroupByGenerators(G.X, GAP.Globals.GeneratorsOfGroup(G.X))
   f !=GAP.Globals.fail || throw(ArgumentError("Could not convert group into a group of type FPGroup"))
   H = FPGroup(GAP.Globals.Image(f))
   return relations(H)
end

function Oscar.relations(G::PcGroup)
   f = GAP.Globals.IsomorphismFpGroupByPcgs(GAP.Globals.FamilyPcgs(G.X), GAP.julia_to_gap("g"))
   f !=GAP.Globals.fail || throw(ArgumentError("Could not convert group into a group of type FPGroup"))
   H = FPGroup(GAP.Globals.Image(f))
   return relations(H)
end


AbstractAlgebra.Group(C::GModule) = C.G
AbstractAlgebra.Module(C::GModule) = C.M
action(C::GModule) = C.ac

function inv_action(C::GModule)
  if !isdefined(C, :iac)
    C.iac = map(inv, C.ac)
  end
  return C.iac
end

function fp_group(C::GModule)
  if !isdefined(C, :F)
    C.F, C.mF = fp_group(gens(Group(C)))
  end
  return C.F, C.mF
end

function action(C::GModule, g, v::Array)
  @assert parent(g) == Group(C)
  F, mF = fp_group(C)
  ac = action(C)
  iac = inv_action(C)
  for i = word(preimage(mF, g))
    if i > 0
      v = map(ac[i], v)
    else
      v = map(iac[-i], v)
    end
  end
  return v
end

function action(C::GModule, g, v)
  return action(C, g, [v])
end

function action(C::GModule, g)
  v = gens(Module(C))
  return hom(Module(C), Module(C), action(C, g, v))
end

struct AllCoChains{N, G, M} #Int (dim), Group(elem), Module(elem)
end

struct CoChain{N, G, M}
  C::GModule
  d::Dict{NTuple{N, G}, M} #cannot get the type correct...or having Julia bugs?
end

function Base.show(io::IO, C::CoChain{N}) where {N}
  print(io, "$N-cochain with values in ", C.C.M)
end

Oscar.Nemo.elem_type(::AllCoChains{N,G,M}) where {N,G,M} = CoChain{N,G,M}
Oscar.Nemo.elem_type(::Type{AllCoChains{N,G,M}}) where {N,G,M} = CoChain{N,G,M}
Oscar.Nemo.parent_type(::CoChain{N,G,M})  where {N,G,M}= AllCoChains{N,G,M}

"""
Evaluate a 0-cochain
"""
(C::CoChain{0})() = first(values(C.d))

"""
Evaluate a 1-cochain, a 1-cochain is a map from the group into the
module
"""
function (C::CoChain{1})(g::Oscar.BasicGAPGroupElem)
  if haskey(C.d, (g,))
    return C.d[(g,)]
  end
  F, mF = fp_group(C.C)
  w = word(preimage(mF, g))
  t = zero(Module(C.C))
  ac = action(C.C)
  iac = inv_action(C.C)
  G = Group(C.C)
  #TODO: build up the group element step by step
  #      and store the values:
  # (g^n) will compute g^2, g^3, ... this should be stored
  #XXX: this only works if the group elements are unique
  for i = w
    if i > 0
      t = ac[i](t)+C.d[(gen(G, i),)]
    else
      t = iac[-i](t)-C.d[(gen(G, -i),)]
    end
  end
  C.d[(g,)] = t
  return t
end

"""
Evaluate a 2-cochain, a 2-cochain is a map from paris of group elements
into the module
"""
function (C::CoChain{2})(g::Oscar.BasicGAPGroupElem, h::Oscar.BasicGAPGroupElem)
  if haskey(C.d, (g,h))
    return C.d[(g,h)]
  end
end
(C::CoChain{2})(g::NTuple{2, <:Oscar.BasicGAPGroupElem}) = C(g[1], g[2])

function H_zero(C::GModule)
  z = get_attribute(C, :H_zero)
  if z !== nothing
    return domain(z), z
  end
  G = Group(C)
  M = Module(C)
  id = hom(M, M, gens(M))
  ac = action(C)
  k = kernel(id - ac[1])[1]
  for i=2:length(ac)
    k = intersect(k, kernel(id - ac[i])[1])
  end
  z = MapFromFunc(x->CoChain{0,elem_type(G),elem_type(M)}(C, Dict(() => x)), y->y(), k, AllCoChains{0,elem_type(G),elem_type(M)}())
  set_attribute!(C, :H_zero => z)
  return k, z
end

#= TODO
 - break out coboundaries and cochains
 - depending on the module type:
   - intersect yields an embedding (Z-module) or not GrpAb
   - make sure that image/ kernel are consisten
   - preimage 
   - issubset yields (for GrpAb) only true/ false, not the map
   - issubgroup has the "wrong" order of arguments (and cannot apply
     to modules)
   - quo does ONLY work if B is a direct submodule of A (Z-modules)
   - mat or matrix is used to get "the matrix" from a hom
   - zero_hom/ zero_obj/ identity_hom is missing
   - Janko-Module-Homs have different types, they probably need to
     come under a common abstract type or be more selective
=#

function H_one(C::GModule)
  z = get_attribute(C, :H_one)
  if z !== nothing
    return domain(z), z
  end
  #= idea, after Holt:
  H^1 = crossed homs. due to action on the right
  f(ab) = f(a)^b + f(b)
  if G=<g_1, ..., g_r | r_1, ..., r_l>
  then X in H^1 iff X(r_i) = 0 for all i
  X:G->M is given as X in M^r, where X(g_i) = X[i]
  X(r_i) corresponds to some map phi_i : M^r -> M
  phi_i = oplus h_j M for some homs h_j coming from the word in r
  so, a kernel computation again
  =#

  G = Group(C)
  n = ngens(G)
  M = Module(C)
  D, pro, inj = direct_product([M for i=1:n]..., task = :both)

  F, mF = fp_group(C)
  R = relators(F)

  K = D
  ac = action(C)
  iac = inv_action(C)
  idM = hom(M, M, gens(M)) #identity map to start with
                           #TODO: require an identity_hom constructor
  for r = R
    W = word(r)
    g = idM
    P = hom(D, M, [zero(M) for i=1:ngens(D)])
    for w in W
      if w < 0
        g = g*iac[-w]
        P -= pro[-w]*g
      else
        P += pro[w]*g
        g = g*ac[w]
      end
    end
    K = intersect(kernel(P)[1], K)
  end
  #K is Z[1]  - the co-cycles
  #TODO: is kernel(g) directly faster than the method above (H_zero)
  #      where kernel(g) is computed slice by slice?
  #TODO: cache the expensive objects!!!

  g = sum((ac[i] - idM)*inj[i] for i=1:n)
  lf, lft = issubgroup(D, K)

  Q, mQ = quo(K, image(g)[1])
  z = MapFromFunc(
    x->CoChain{1,elem_type(G),elem_type(M)}(C, Dict([(gen(G, i),) => pro[i](lft(preimage(mQ, x))) for i=1:ngens(G)])), 
    y->mQ(preimage(lft, sum(inj[i](y(gen(G, i))) for i=1:n))), Q, AllCoChains{1, elem_type(G), elem_type(M)}())

  set_attribute!(C, :H_one => z)
  return Q, z    
  #need to ALSO return the coboundary(s)
end

function Oscar.issubset(M::AbstractAlgebra.FPModule{T}, N::AbstractAlgebra.FPModule{T}) where T<:RingElement 
  fl = issubmodule(N, M)
  if fl
    return fl, hom(M, N, elem_type(N)[N(m) for m = gens(M)])
  else
    return fl, hom(M, N, elem_type(N)[zero(N) for m = gens(M)])
  end
end

"""
Computes an isomorphic fp-group and a confluent system of
relations given as pairs of words.

Returns the new group, the isomorphism and the confluent relations.
"""
function confluent_fp_group(G::Oscar.GAPGroup)
  C = GAP.Globals.ConfluentMonoidPresentationForGroup(G.X)
  #has different generators than G! So the action will have to
  #be adjusted to those words. I do not know if a RWS (Confluent) can
  #just be changed...
  k = C.monhom #[2] #hopefully the monhom entry in 4.12 it will be the name
  M = GAP.Globals.Range(k)
  g = [GAP.Globals.PreImageElm(k, x) for x = GAP.Globals.GeneratorsOfMonoid(M)]
  g = map(GAP.Globals.UnderlyingElement, g)
  g = map(GAP.Globals.LetterRepAssocWord, g)
  @assert all(x->length(x) == 1, g)
  g = map(x->Int(x[1]), g)
  R = GAP.Globals.RelationsOfFpMonoid(M)

  ru = Vector{Tuple{Vector{Int}, Vector{Int}}}()
  for r = R
    push!(ru, (map(x->g[Int(x)], GAP.Globals.LetterRepAssocWord(r[1])), 
               map(x->g[Int(x)], GAP.Globals.LetterRepAssocWord(r[2]))))
  end

  #now to express the new gens as words in the old ones:
  
  Fp = FPGroup(GAP.Globals.Range(C.fphom))
  return Fp, GAPGroupHomomorphism(Fp, G, GAP.Globals.InverseGeneralMapping(C.fphom)), ru
end

function Oscar.preimage(f::GAPGroupHomomorphism, x::GAPGroupElem) 
  fl, p = haspreimage(f, x)
  @assert fl
  return p
end

mutable struct CollectCtx
  r::Vector{Tuple{Vector{Int}, Vector{Int}}} #the rules, RWS

  d1::Dict{Int, Int} #rules where lhs has length 1

  d2::Dict{Tuple{Int, Int}, Vector{Int}} # length 2 prefixes

  f::Function #(w::Vector{Int}, r::Int, p::Int)
              #to be called in addition (to play with the tail(s))
              #w the word, to be "reduced" using rule no r at pos p

  T::Any
  function CollectCtx(R::Vector{Tuple{Vector{Int}, Vector{Int}}})
    n = new()
    n.r = R
    n.d1 = Dict{Int, Int}()
    n.d2 = Dict{Tuple{Int, Int}, Vector{Int}}()
    for i = 1:length(R)
      r = R[i]
      if length(r[1]) == 1
#        @assert length(r[2]) == 1
        n.d1[r[1][1]] = r[2][1]
        continue
      end
      @assert length(r[1]) > 1
      p = (r[1][1], r[1][2])
      if Base.haskey(n.d2, p)
        push!(n.d2[p], i)
      else
        n.d2[p] = [i]
      end
    end
    for p = keys(n.d2)
      sort!(n.d2[p], lt = (a,b) -> isless(R[a], R[b]))
    end
    return n
  end
end

function Base.collect(w::Vector{Int}, C::CollectCtx)
  d1 = C.d1
  d2 = C.d2
  R = C.r
  do_f = isdefined(C, :f)
  for i=1:length(w)
    if haskey(d1, w[i])
      w[i] = d1[w[i]]
    end
  end

  nc = 0
  i = 1
  while true
    nc += 1
    if i>=length(w)
      return w
    end
    if haskey(d2, (w[i], w[i+1]))
      for r = d2[(w[i], w[i+1])]
        if length(R[r][1]) + i-1 <= length(w) &&
           R[r][1] == w[i:i+length(R[r][1])-1]
          if do_f
            C.f(C, w, r, i)
          end
          w = vcat(w[1:i-1], R[r][2], w[i+length(R[r][1]):end])
          i = 0
          break
        end
      end
    end
    i += 1
  end
  return w
end

#XXX: should be in AA and supplemented by a proper quo
function Oscar.hom(V::Module, W::Module, v::Vector{<:ModuleElem}; check::Bool = true)
  if ngens(V) == 0
    return Generic.ModuleHomomorphism(V, W, zero_matrix(base_ring(V), ngens(V), ngens(W)))
  end
  return Generic.ModuleHomomorphism(V, W, vcat([x.v for x = v]))
end
function Oscar.hom(V::Module, W::Module, v::MatElem; check::Bool = true)
  return Generic.ModuleHomomorphism(V, W, v)
end
function Oscar.inv(M::Generic.ModuleHomomorphism)
  return hom(codomain(M), domain(M), inv(mat(M)))
end

function Oscar.direct_product(M::Module...; task::Symbol = :none)
  D, inj, pro = direct_sum(M...)
  if task == :none
    return D
  elseif task == :both
    return D, pro, inj
  elseif task == :sum
    return D, inj
  elseif task == :prod
    return D, pro
  end
  error("illegal task")
end

Base.:+(a::Generic.ModuleHomomorphism, b::Generic.ModuleHomomorphism) = hom(domain(a), codomain(a), mat(a) + mat(b))
Base.:-(a::Generic.ModuleHomomorphism, b::Generic.ModuleHomomorphism) = hom(domain(a), codomain(a), mat(a) - mat(b))
Base.:-(a::Generic.ModuleHomomorphism) = hom(domain(a), codomain(a), -mat(a))

#XXX for Hecke
Base.zero(G::GrpAbFinGen) = G[0]
Base.:-(M::GrpAbFinGenMap) = hom(domain(M), codomain(M), [-M(g) for g = gens(domain(M))], check = false)

function Oscar.mat(M::FreeModuleHom{FreeMod{QabElem}, FreeMod{QabElem}})
  return M.matrix
end

#= Hulpke-Dietrich:
UNIVERSAL COVERS OF FINITE GROUPS
https://arxiv.org/pdf/1910.11453.pdf
almost the same as Holt
=#
function H_two(C::GModule)
  z = get_attribute(C, :H_two)
  if z !== nothing
    return domain(z[1]), z[1], z[2]
  end
  G = Group(C)
  M = Module(C)
  id = hom(M, M, gens(M), check = false)
  Ac = action(C)
  iAc = inv_action(C)

  F, mF = fp_group(C) #mF: F -> G
  FF, mFF, R = confluent_fp_group(G) #mFF: FF -> G
  #now map the action generators (for gens(G)) to the gens for the RWS
  ac = []
  iac = []
  for g = gens(FF)
    f = id
    for i = word(preimage(mF, mFF(g)))
      if i < 0
        f = f*iAc[-i]
      else
        f = f*Ac[i]
      end
    end
    push!(ac, f)
    push!(iac, inv(f))
  end

  c = CollectCtx(R)

  #rules with length(LHS) == 1 and rules of the form
  # [a a^-1] -> [], [a^-1 1] -> [] do not get tails
  pos = Vector{Int}()
  n = 0
  for i = 1:length(R)
    r = R[i]
    if length(r[1]) == 1
      push!(pos, 0)
      continue
    end
    if length(r[1]) == 2 && length(r[2]) == 0 && r[1][1] == -r[1][2]
      push!(pos, 0)
      continue
    end
    n += 1
    push!(pos, n)
  end

  D, pro, inj = direct_product([M for i=1:n]..., task = :both)

  #when collecting (i.e. applying the RWS we need to also
  #use the tails:  g v h -> gh h(v) 
  #and if [gh] -> [x] with tail t, then
  #       gh -> x t, so 
  #       g v h -> gh h(v) -> x t+h(v)
  # Hulpke calls this the normal version: reduced group word
  # at the beginning, module at the end, the tail.
  # collect will call the extra function c.f if set in the
  # CollectCtx
  c.f = function(C::CollectCtx, w::Vector{Int}, r::Int, p::Int)
    #w = ABC and B == r[1], B -> r[2] * tail[r]
    # -> A r[2] C C(tail)
    # C = c1 c2 ... C(tail):
    @assert w[p:p+length(R[r][1])-1] == R[r][1]

    if pos[r] == 0
      return
    end
    T = pro[pos[r]]
    for i=w[p+length(R[r][1]):end]
      if i < 0
        T = T*iac[-i]
      else
        T = T*ac[i]
      end
    end
    C.T += T
  end

  E = D
  all_T = []
  Z = hom(D, M, [M[0] for i=1:ngens(D)], check = false)
  for i = 1:length(R)
    r = R[i]
    #rules of LHS length 1 do not generate equations
    if length(r[1]) == 1
      continue
    end
    for j=1:length(R)
      s = R[j]
      if length(s[1]) == 1
        continue
      end
      #we want overlaps, all of them:
      #r[1] = AB, s[1] = BC this is what we need to find...
      #(then we call collect on r[2]C and As[2] they should agree)
      for l=1:min(length(s[1]), length(r[1]))
        if r[1][end-l+1:end] == s[1][1:l]
          #TODO  AB    -> Ss  s,t are tails
          #       BC   -> Tt
          #      (AB)C -> SsC -> SC C(s)
          #      A(BC) -> ATt -> AT t
          if pos[i] > 0 
            c.T = pro[pos[i]]
            for h = s[1][l+1:end]
              if h < 0
                c.T = c.T * iac[-h]
              else
                c.T = c.T * ac[h]
              end
            end
          else
            c.T = Z
          end
          z1 = collect(vcat(r[2], s[1][l+1:end]), c)
          T = c.T
          c.T = Z
          z2 = collect(vcat(r[1][1:end-l], s[2]), c)
          if pos[j] > 0
            c.T += pro[pos[j]]
          end
          @assert z1 == z2
          push!(all_T, T-c.T)
        end
      end
    end
  end

  Q, jinj = direct_product([M for i in all_T]..., task = :sum)
  mm = sum(all_T[i]*jinj[i] for i = 1:length(all_T))
  E, mE = kernel(mm)


  B, B_pro, B_inj = direct_product([M for i=1:length(ac)]..., task = :both)
  CC = hom(B, D, [zero(D) for i=1:ngens(B)], check = false)
  for i=1:length(R)
    if pos[i] == 0
      continue
    end
    r = R[i]
    if length(r[1]) == 1
      continue
    end
    #we have words r[1] and r[2] of shape g_1 g_2 .... 
    #they need to be replaced by g_1 pro[1] g_2 pro[2]
    #and then sorted: g_1 pro[1] g_2 pro[2] ... ->
    #                 g_1 g_2 (pro[1] * g_2 + pro[2]) ...
    if r[1][1] < 0
      T = -B_pro[-r[1][1]]*iac[-r[1][1]]
    else
      T = B_pro[r[1][1]]
    end
    for j=2:length(r[1])
      if r[1][j] < 0
        T = (T-B_pro[-r[1][j]])*iac[-r[1][j]] 
      else
        T = T*ac[r[1][j]] + B_pro[r[1][j]]
      end
    end

    if length(r[2]) == 0
      S = hom(B, M, [M[0] for g = gens(B)], check = false)
    elseif r[2][1] < 0
      S = -B_pro[-r[2][1]]*iac[-r[2][1]]
    else
      S = B_pro[r[2][1]]
    end
    for j=2:length(r[2])
      if r[2][j] < 0
        S = (S-B_pro[-r[2][j]])*iac[-r[2][j]]
      else
        S = S*ac[r[2][j]] + B_pro[r[2][j]]
      end
    end

#    @assert issubset(image((T-S)*inj[pos[i]])[1], E)

    CC += (T-S)*inj[pos[i]]
  end
  i, mi = image(CC)
  H2, mH2 = quo(E, i)

  function TailFromCoChain(cc::CoChain{2})
    #for all tails, ie. rules with pos[r]>0, we need to use
    #the 2-chain to compute r[1]*inv(r[2])
    T = zero(D)
    for r=1:length(pos)
      if pos[r] == 0
        continue
      end
      w = copy(R[r][1])
      for v in reverse(R[r][2])
        push!(w, -v)
      end
      #w is r[1]*inv(r[2])

      t = zero(M)
      g = one(G)
      for i=1:length(w)
        if w[i] > 0
          t = ac[w[i]](t)+cc(g, gen(G, w[i]))
          g = g*gen(G, w[i])
        else
          t = iac[-w[i]](t)+cc(g, inv(gen(G, -w[i])))
          g = g*inv(gen(G, -w[i]))
        end
      end
      T += inj[pos[r]](t)
    end
    return T
  end

  function TailToCoChain(t)
    c.f = function(C::CollectCtx, w::Vector{Int}, r::Int, p::Int)
      #w = ABC and B == r[1], B -> r[2] * tail[r]
      # -> A r[2] C C(tail)
      # C = c1 c2 ... C(tail):
      @assert w[p:p+length(R[r][1])-1] == R[r][1]

      if pos[r] == 0
        return
      end
      T = pro[pos[r]](t)
      for i=w[p+length(R[r][1]):end]
        if i < 0
          T = iac[-i](T)
        else
          T = ac[i](T)
        end
      end
      C.T += T
    end

    di = Dict{NTuple{2, elem_type(G)}, elem_type(M)}()
    w = [word(preimage(mFF, g)) for g = gens(G)]
    #= if I figure out how to extend from generators
    for i=1:ngens(G)
      for j=1:ngens(G)
        c.T = zero(M)
        collect(vcat(w[i], w[j]), c)
        di[(gen(G, i), gen(G, j))] = c.T
      end
    end
    =#
    for g = G
      for h = G
        c.T = zero(M)
        collect(vcat(word(preimage(mFF, g)), word(preimage(mFF, h))), c)
        di[(g, h)] = c.T
      end
    end
    return CoChain{2,elem_type(G),elem_type(M)}(C, di)
  end

  function iscoboundary(c::CoChain{2})
    t = TailFromCoChain(c)
    fl, b = haspreimage(CC, t)
    if !fl
      return false, nothing
    end
    return true, CoChain{1,elem_type(G),elem_type(M)}(C, Dict([(gen(G, i),) => B_pro[i](b) for i=1:ngens(G)]))
  end

  z = (MapFromFunc(x->TailToCoChain(mE(preimage(mH2, x))), 
                         y->mH2(preimage(mE, TailFromCoChain(y))), H2, AllCoChains{2,elem_type(G),elem_type(M)}()),
             iscoboundary)
  set_attribute!(C, :H_two => z)
  return H2, z[1], z[2]
  #now the rest...
  #(g, m)*(h, n) = (gh, m^h+n+gamma(g, h)) where gamma is "the" 2-cocycle
  #using tails:
  # gmhn -> gh h(m)+n -> x t+h(m) + n where x is the reduced
  #                                   word under collection and t is the 
  #                                   "tail"
  # so gamma(g, h) = t
  # given gamma need the tails:
  # need to implement the group operation for the extension
  # (g, v)(h, u) -> (gh, v^h + u + gamma(g, h))
  # then the rules with tails need to be evaluated at
  # the group generators (g_i, 0) 
  # r -> s gives a relation r s^-1 which should evaluate, using gamma
  # to (0, t) where t is the tail for this rule
end

"""
For a gmodule `C` compute the `i`-th cohomology group
  where `i` can be `0`, `1` or `2`.
Together with the abstract module, a map is provided that will 
  produce explicit cochains.
"""
function cohomology_group(C::GModule{PermGroup,GrpAbFinGen}, i::Int)
  #should also allow modules...
  if i==0
    return H_zero(C)
  elseif i==1
    return H_one(C)
  elseif i==2
    return H_two(C)
  end
  error("only H^0, H^1 and H^2 are supported")
end

"""
For a fin. presented abelian group, return an isomorphic fp-group as well
as the map between the 2 groups
"""
function fp_group(M::GrpAbFinGen)
  G = free_group(ngens(M))
  R = rels(M)
  s = vcat([i*j*inv(i)*inv(j) for i = gens(G) for j = gens(G)], 
                  [reduce(*, [gen(G, i)^R[j,i] for i=1:ngens(M) if !iszero(R[j,i])], init = one(G)) for j=1:nrows(R)])
  F, mF = quo(G, s)
  return F, MapFromFunc(x->reduce(+, [sign(w)*gen(M, abs(w)) for w = word(x)], init = zero(M)), y->mF(reduce(*, [gen(G, i)^y[i] for i=1:ngens(M)], init = one(G))), F, M)
end

"""
Given a 2-cocycle, return the corresponding group extension, ie. the large
group, the injection of the abelian group and the quotient.
"""
function extension(c::CoChain{2,PermGroupElem})
  C = c.C
  G = Group(C)
  F, mF = fp_group(gens(G))
  M = Module(C)
  ac = action(C)
  iac = inv_action(C)
  fM, mfM = fp_group(M)
  N = free_group(ngens(G) + ngens(fM))
  function fMtoN(g)
    return reduce(*, [gen(N, ngens(G)+abs(w))^w for w = word(g)], init = one(N))
  end
  s = map(fMtoN, relators(fM))
  for R = relators(F)
    t = zero(M)
    g = one(G)
    r = one(N)
    for w = word(R)
      if w > 0
        t = ac[w](t) + c(g, gen(G, w))
        g = g*gen(G, w)
        r = r*gen(N, w)
      else
        t = iac[-w](t) + c(g, inv(gen(G, -w)))
        g = g*inv(gen(G, -w))
        r = r*inv(gen(N, -w))
      end
    end
    push!(s, r*fMtoN(preimage(mfM, t)))
  end
  for i=1:ngens(G)
    for j=1:ngens(fM)
      #m[i]*g[j] = g[j] m[i]^g[j]
      t = preimage(mfM, ac[i](gen(M, j)))
      push!(s, gen(N, ngens(G)+j)*gen(N, i)*inv(fMtoN(t)) * inv(gen(N, i)))
    end
  end
  Q, mQ = quo(N, s)
  @assert ngens(Q) == ngens(N)
  MtoQ = hom(fM, Q, gens(fM), gens(Q)[ngens(G)+1:end])
  QtoG = hom(Q, G, gens(Q), vcat(gens(G), [one(G) for i=1:ngens(fM)]))
  return Q, inv(mfM)*MtoQ, QtoG
end

function fp_group(c::CoChain{2})
  return extension(c)[1]
end

Oscar.elem_type(::Type{Hecke.NfMorSet{T}}) where {T <: Hecke.LocalField} = Hecke.LocalFieldMor{T, T}
function Oscar.automorphism_group(::Type{PermGroup}, k)
  G, mG = automorphism_group(k)
  H = symmetric_group(degree(k))
  gens(G) #to make sure gens are actually there...
  H = sub(H, [H(G.mult_table[i, :]) for i=G.gens])[1]

  function HtoG(p::PermGroupElem)
    m = [i^p for i=1:degree(k)]
    i = Base.findfirst(x->G.mult_table[x, :] == m, 1:degree(k))
    return mG(GrpGenElem(G, i))
  end

  function GtoH(a::NfToNfMor)
    g = preimage(mG, a)
    return H(G.mult_table[g.i, :])
  end

  return H, MapFromFunc(HtoG, GtoH, H, codomain(mG))
end

"""
The natural `ZZ[H]` module where `H`, a subgroup of the
  automorphism group acts on the ray class group.
"""
function gmodule(H::PermGroup, mR::MapRayClassGrp)
  k = nf(order(codomain(mR)))
  G, mG = automorphism_group(PermGroup, k)

  ac = Hecke.induce_action(mR, [image(mG, G(g)) for g = gens(H)])
  return GModule(H, ac)
end

"""
Given an automorphism of some module for each generator of the
group `H`, return the `ZZ[H]` module.

Note: we do not check that this defined indeed a `ZZ[H]` module.
"""
function gmodule(H::Oscar.GAPGroup, ac::Vector{<:Map})
  return GModule(H, ac)
end
function gmodule(M, H::Oscar.GAPGroup, ac::Vector{<:Map})
  return GModule(M, H, ac)
end

function _gmodule(k::AnticNumberField, H::PermGroup, mu::Map{GrpAbFinGen, FacElemMon{AnticNumberField}})
  u = domain(mu)
  U = [mu(g) for g = gens(u)]
  G, mG = automorphism_group(PermGroup, k)
  ac = [hom(u, u, [preimage(mu, mG(g)(x)) for x = U]) for g = gens(H)]
  return gmodule(H, ac)
end

function gmodule(H::PermGroup, mu::Map{GrpAbFinGen, FacElemMon{AnticNumberField}})
  return _gmodule(base_ring(codomain(mu)), H, mu)
end

function gmodule(H::PermGroup, mu::Hecke.MapUnitGrp{NfOrd})
  #TODO: preimage for sunits can fail (inf. loop) if
  # (experimentally) the ideals in S are not coprime ar include 1
  # or if the s-unit is not in the image (eg. action and not closed set S)
  u = domain(mu)
  U = [mu(g) for g = gens(u)]
  zk = codomain(mu)
  k = nf(zk)
  G, mG = automorphism_group(PermGroup, k)
  ac = [hom(u, u, [preimage(mu, zk(mG(g)(k(x)))) for x = U]) for g = gens(H)]
  return gmodule(H, ac)
end

function gmodule(H::PermGroup, mu::Map{GrpAbFinGen, AnticNumberField})
  return _gmodule(codomain(mu), H, mu)
end

function iscoboundary(c::CoChain{2,PermGroupElem,nf_elem})
  zk = maximal_order(parent(first(values(c.d))))
  cp = coprime_base(vcat([numerator(norm(x*denominator(x))) for x = values(c.d)],
                         map(denominator, values(c.d))))
  s = Set(reduce(vcat, [collect(keys(factor(x).fac)) for x = cp], init = [1]))
  if 1 in s
    pop!(s, 1)
  end

  Cl, mCl = class_group(zk)
  if length(s) == 0
    S = Set{NfOrdIdl}()
  else
    S = Set(reduce(vcat, [collect(keys(prime_decomposition(zk, p))) for p = s]))
  end
  
  q, mq = quo(Cl, [preimage(mCl, x) for x = s])
  p = 2
  while order(q) > 1
    p = next_prime(p)
    if p in s
      continue
    end
    lp = prime_decomposition(zk, p)
    cP = [mq(preimage(mCl, x[1])) for x= lp]
    if all(iszero, cP)
      continue
    end
    S = union(S, Set([x[1] for x = lp]))
    q, mmq = quo(q, cP)
    mq = mq*mmq
  end
  if length(S) == 0
    u, mu = Hecke.unit_group_fac_elem(zk)
  else
    u, mu = Hecke.sunit_group_fac_elem(collect(S))
  end
  C = gmodule(Group(c.C), mu)
  _, _, z = cohomology_group(C, 2)
  cc = CoChain{2,PermGroupElem,GrpAbFinGenElem}(C, Dict((h, preimage(mu, v)) for (h,v) = c.d))
  fl, d = z(cc)
  if !fl
    return fl, d
  end
  return fl, CoChain{1,PermGroupElem,nf_elem}(c.C, Dict((h, evaluate(mu(v))) for (h,v) = d.d))
end

function isunramified(p::NfOrdIdl)
  return ramification_index(p) == 1
end

"""
`p` has to be unramifed in the `base_ring` of `A`
"""
function local_cohomology_easy(A::ClassField, p::NfOrdIdl)
  O = order(p)
  @assert base_ring(A) == nf(O)
  @assert isunramified(p) # && iseasy(p)
  e, f, g = Hecke.prime_decomposition_type(A, p)
  c, cinf = conductor(A)
  @assert length(cinf) == 0 #for the time being, not sure why
  #=
    so, according to the theory:
    p^f * U^val(c, p)) <= N(A_p) <= k_p

    we're unramified, so k_p = <p> * F_q * U^1
    and
    U^1 = Z_q via log (in general this is wrong)
  =#
end

export GModule, gmodule, word, fp_group, confluent_fp_group
       action, cohomology_group, extension, iscoboundary

Oscar.dim(C::GModule) = rank(C.M)
Oscar.base_ring(C::GModule) = base_ring(C.M)
Oscar.group(C::GModule) = C.G

#= TODO
  for Z, Z/nZ, F_p and F_q moduln -> find Fp-presentation
  #done: for GrpAbFinGen          -> find Fp-presentation
  #done: for a in H^2 find Fp-presentation
  for a in H^2 find (low degree) perm group using the perm group we have?
  Magma's DistinctExtensions
  probably aut(GrpAb), ...

Sort: 
 - move the additional GrpAbFinGenMap stuff elsewhere
 - move (and fix) the ModuleHom stuff
 - add proper quo for Modules

  features   
   - inflation, restriction, long exact sequence  

  dreams
   - we we extend to H^-1, ^-2?
   - H^3 (in some cases)
   - cup products
   - the relative cohomology
     https://arxiv.org/pdf/1809.01209.pdf
     https://doi.org/10.1017/S2040618500033050
   - understand Derek Holt and use BSGS for large perm groups
     rather than the RWS (or use BSGS to get an RWS?)

  GModule for 
    - local field (add (trivial) and mult)
    - (S-)units
    - Ali's stuff....
=#    

end # module GrpCoh

using .GrpCoh
export gmodule, GModule

