########################################################
# (1) Display
########################################################

# detailed printing
function Base.show(io::IO, ::MIME"text/plain", X::AbsProjectiveVariety{<:Field,<:MPolyQuoRing})
  io = pretty(io)
  println(io, "Projective variety")
  println(io, Indent(), "in ", Lowercase(), ambient_space(X))
  print(io, Dedent(), "defined by ", Lowercase(), defining_ideal(X))
end

# one line printing
function Base.show(io::IO, X::AbsProjectiveVariety{<:Field,<:MPolyQuoRing})
  if is_terse(io)
    print(io, "Projective variety")
  elseif get_attribute(X, :is_empty, false)
    print(io, "Empty projective variety")
  else
    io = pretty(io)
    print(io, LowercaseOff(), "V(")
    if isdefined(X.X, :Xred)
      I = vanishing_ideal(X)
    else
      I = fat_ideal(X)
    end
    join(io, gens(I), ",")
    print(io, ")")
  end
end


# Projective space
Base.show(io::IO, ::MIME"text/plain", P::AbsProjectiveVariety{<:Field, <:MPolyDecRing}) = Base.show(io, MIME("text/plain"), underlying_scheme(P))

Base.show(io::IO, P::AbsProjectiveVariety{<:Field, <:MPolyDecRing}) = Base.show(io, underlying_scheme(P))

@doc raw"""
    rational_points(::Type{S}, X::ProjectiveVariety)

If $X$ is defined by a homogeneous zero-dimensional ideal in a multivariate
graded polynomial ring over a field, say, $k$, return the $k$-rational
points of $X$ as an instance of $S$. Here, S must be one of Vector
and AbsRationalPointSet.

!!! note
The zero-dimensional condition is checked by the function.

# Examples
```jldoctest
julia> R,(x,y,z) = graded_polynomial_ring(QQ,3)
(Graded multivariate polynomial ring in 3 variables over QQ, MPolyDecRingElem{QQFieldElem, QQMPolyRingElem}[x1, x2, x3])

julia> I = ideal(R,[(x+y+z),x-y+2*z])
Ideal generated by
  x1 + x2 + x3
  x1 - x2 + 2*x3

julia> X = variety(I)
Projective variety
  in projective 2-space over QQ with coordinates [x1, x2, x3]
defined by ideal (x1 + x2 + x3, 2*x2 - x3)

julia> rational_points(X)
3-element Vector{QQFieldElem}:
 -3//2
 1//2
 1

```
"""
function rational_points(::Type{S}, X::ProjectiveVariety{T}) where {T <: Field, S<:Vector}
  @req dim(X) == 0 "Not a zero-dimensional projective algebraic set"
  @req is_standard_graded(ambient_coordinate_ring(X)) "only available for standard grading"
  I = vanishing_ideal(X)
  all(b -> degree(b)[1] == 1, gens(I)) || "not all equations of degree 1"
  If = forget_grading(I)
  Rf = base_ring(If)
  V = matrix(coefficient_ring(Rf),ngens(If),ngens(Rf),
        [coeff(gen(If,erz),gen(Rf,rvar))
               for erz in 1:ngens(If), rvar in 1:ngens(Rf)])
  KV = kernel(transpose(V))
  size(KV)[1] == 1 || error("not a single point")
  return [KV[1,b] for b in 1:size(KV)[2]]
end

function rational_points(::Type{S}, X::ProjectiveVariety{T}) where {T <: Field, S <:AbsRationalPointSet}
  v = rational_points(Vector,X)
  return finite_pointset(X,v)
end