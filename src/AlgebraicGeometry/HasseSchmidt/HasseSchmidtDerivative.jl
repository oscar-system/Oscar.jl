
export adjugate
export pseudo_diff
export integer_generator
export hasse_deriv


####################################################################################
#####################   ADJUGATE MATRIX   ########################################## 
# Name:		adjugate
#
# INPUT:	square matrix M 
# OUTPUT:	adjugate matrix of M

# function provided by Max Horn. Thx
function adjugate(M)
  c = charpoly(M)
  f = divexact(c - c(0), gen(parent(c)))
  a = f(M)
  iseven(nrows(M)) ? -a : a
end

####################################################################################
##################   DERIVATE WITH RESPECT TO PARAMETERSYSTEM   ####################
# Name:		pseudo_diff
#
# INPUT:	
# OUTPUT:	

function pseudo_diff(f, j, A, q, I::Ideal, systemOfParameters::Vector)
  R = base_ring(I)

  # Check for correct input? No, it'll be checked in main functions.
  gensR = gens(R)
  RetPoly = q * derivative(f, systemOfParameters[j])

  # Generating a list of Variables which aren't in parametersystem y
  OtherVars = empty(gensR)
  n = ngens(R)
  for k in 1:n
    gensR[k] in systemOfParameters || push!(OtherVars, gensR[k])
  end

  # See formular in remark 4.2
  for k in 1:ncols(A)
    for l in 1:nrows(A)
      SubPoly = derivative(gens(I)[l], systemOfParameters[j]) * A[l,k] * derivative(f, OtherVars[k])
      RetPoly = RetPoly - SubPoly
    end
  end
  Istd = standard_basis(I)
  RetPoly = reduce(RetPoly, gens(Istd)) # mod IZ
  return (RetPoly)
end

####################################################################################
#####################   INTEGER GENERATOR   ######################################## 
# Name:		integer_generator
#
# INPUT:	Ideal I
# OUTPUT:	Ideal J, was den Schnitt von I mit dem Ring repräsentiert, über den der Polynomring definiert ist

function integer_generator(I)
  vars = gens(base_ring(I))
  J = eliminate(I, vars)  # eliminiere die Variablen des Polynomrings aus dem Ideal I
  return (J)
end



# function hasse_deriv(f) # Hs-derivative for one polynomial

# end

####################################################################################
#####################   HASSE-SCHMIDT DERIVATIVE  (IZ == <0>)  ##################### 
# Name:		hasse_deriv
# 			
# INPUT:	Ideals <f_1, ..., f_r> = IX   (IZ = <0>)
# OUTPUT:	List of ideals generated by hasse derivatives until but without <1>

function hasse_deriv(IX)

  R = base_ring(IX)
  n = ngens(R) # number of variables of R
  r = ngens(IX) # number of generators of IX

  # Variables of Rtemp don't have names. This way there are less problems with the names of variables of R. 
  Rtemp, _ = polynomial_ring(base_ring(R), "y" => 1:n, "t" => 1:n)
  F = gens(IX)
  # replace f_j(x_i) -> f(y_i + t_i)
  for j in 1:r
    F[j] = evaluate(F[j], gens(Rtemp)[1:n] + gens(Rtemp)[n+1:2n]) # F(x) -> F(y+t)
  end
  # F = [evaluate(F[j], gens(Rtemp)[1:n] + gens(Rtemp)[n+1:2n]) for j in 1:r]
  # Initializing Variables
  i=1   # counter to iterate through degrees of monomials
  tempid = gens(IX) # list to collect generators of IX and their Hasse Schmidt derivatives
  RetList = [IX]  # list to collect ideals generated by tempid
  # RetList = empty([IX])
  varR = vcat(gens(R), ones(ZZRingElem, n)) # TODO: fmpz gibts nicht mehr wenn der dev-tree genutzt wird # fmpz -> ZZRingElem, fmpq -> QQFieldElem

  while i == 1 || tempid != gens(RetList[i-1])  # Comparing ideals was a bad idea # A little loophole: 2nd condition would throw an error at the first iteration but because i==1 is true the 2nd conditions check is skipped.
    for polynome in F
      for term in terms(polynome)
        if sum(degrees(term)[n+1:2n]) == i
          tempid = vcat(tempid, [evaluate(term, varR)]) # maybe use vector operations for shorter code?
        end
      end
    end
    i = i + 1
    RetList = vcat(RetList, ideal(R, tempid))
  end
  return (RetList[1:i-1])
end

####################################################################################
#####################   HASSE-SCHMIDT DERIVATIVE  (IZ != <0>)   #################### 
# Name:		hasse_deriv
# 
# INPUT:	Ideals IZ,IX, system of parameters y, matrix M
# OUTPUT:	List of ideals generated by hasse derivatives until but without <1>

function hasse_deriv(IZ,IX,y,M)
  R = base_ring(IZ)
  if IZ == ideal(R, [zero(R)])
    return hasse_deriv(IX)
  end

  # Checking for correct input. 
  IZ !== IX || error("IZ and IX cannot be equal.")
  issubset(IZ,IX) || error("IZ needs to be a subset of IX.")

  # IZstd = standard_basis(ideal(R, reduce(IX, standard_basis(IZ)))) # why is this returning gens(IZ)
  n = ngens(R) # number of variables of R
  t = ngens(IZ)
  r = ngens(IX) - t # number of generators of IX without number of generators of IZ
  f = empty([R(0)])        
  for poly in gens(IX)
    println("# ", poly)
    poly in IZ || push!(f, poly)
  end # f = [Generators of IX but not of IZ]
  detM = det(M)
  A = adjugate(M)

  Itemp = IX
  RetList = [IX] # List of ideals to return.
  # RetList = empty([IX]) # Maybe we don't need IX as first entry?
  Null = zeros(ZZ, length(y)) 

  L = [[f[i],Null] for i in 1:r]
  old = 0
  cur = r 

  while integer_generator(Itemp) == ideal(R, [zero(R)]) # intersect(Itemp, ZZ) == <0> 
    println("# Intersection(Itemp, ZZ) == <0>")
    println("# old = ", old)
    println("# cur = ", cur)
    for i in old+1:cur # for every f in Itemp without gens(IZ)
      # println("# i = ", i)
      for j in 1:length(y) # for every varialbe of system of parameters y
        # println("# yj = ", y[j], " ")
        ftemp = L[i][1]
        note = copy(L[i][2]) # "copy" is important, otherwise "note" would only be a pointer to L[i][2] and NOT a copy
        note[j] = note[j] + 1
        # normal pseudo_diff divided by faktor a
        ftemp = div(pseudo_diff(ftemp, j, A, detM, IZ, y), R(note[j]))
        if ftemp != zero(R)
          L = push!(L, [ftemp, copy(note)]) # "copy" is important, (see above)
          Itemp = Itemp + ideal(R, ftemp)
        end
        sleep(0.001) # hasse_deriv did not work without letting it sleep (julia-stuff)
        println("# ftemp = ", ftemp, " # note = ", note)
        # println("# L = ", L)
      end
      sleep(0.001) # hasse_deriv did not work without letting it sleep (julia-stuff)
    end
    println("# Itemp before saturation: ", Itemp)
    Itemp = saturation(Itemp, ideal(R, detM)) # saturate with <det(M)> to get rid of the factor q = det(M) we got using pseudo_diff
    println("# Itemp saturated with ", detM, ": ", Itemp)
    RetList = push!(RetList, Itemp)
    old = cur
    cur = length(L)
    sleep(0.001) # hasse_deriv did not work without letting it sleep (julia-stuff)
    # println("# RetList = ", RetList)
  end
  return (RetList)
end