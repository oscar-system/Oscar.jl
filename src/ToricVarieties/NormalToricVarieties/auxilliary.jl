############################
# Computation of the toric ideal
############################

@doc Markdown.doc"""
    binomial_exponents_to_ideal(binoms::Union{AbstractMatrix, fmpz_mat}, coefficient_ring::AbstractAlgebra.Ring)

This function converts the rows of a matrix to binomials. Each row $r$ is
written as $r=u-v$ with $u,v\ge 0$ by splitting into positive and negative
entries. Then the row $r$ corresponds to $x^u-x^v$.  The resulting ideal is
returned.

# Examples
```jldoctest
julia> A = [-1 -1 0 2; 2 3 -2 -1]
2Ã—4 Matrix{Int64}:
 -1  -1   0   2
  2   3  -2  -1

julia> binomial_exponents_to_ideal(A, QQ)
ideal(-x1*x2 + x4^2, x1^2*x2^3 - x3^2*x4)
```
"""
function binomial_exponents_to_ideal(binoms::Union{AbstractMatrix, fmpz_mat}, coefficient_ring::AbstractAlgebra.Ring)
    nvars = ncols(binoms)
    R::FmpqMPolyRing, x = PolynomialRing(coefficient_ring, ["x" * string(i) for i in 1:nvars], cached=false)
    if nrows(binoms) == 0
        return ideal([zero(R)])
    end
    terms = Vector{fmpq_mpoly}(undef, nrows(binoms))
    for i in 1:nrows(binoms)
        binom = binoms[i, :]
        xpos = one(R)
        xneg = one(R)
        for j in 1:nvars
            if binom[j] < 0
                xneg = xneg * x[j]^(-binom[j])
            elseif binom[j] > 0
                xpos = xpos * x[j]^(binom[j])
            end
        end
        terms[i] = xpos-xneg
    end
    return ideal(terms)
end
export binomial_exponents_to_ideal


@doc Markdown.doc"""
    toric_ideal(pts::fmpz_mat, coefficient_ring::AbstractAlgebra.Ring)

Return the toric ideal generated from the linear relations between the points
`pts`. This is the ideal generated by the set of binomials
$$\{x^u-x^v\ |\ u,v\in\mathbb{Z}^n_{\ge 0}\ (pts)^T\cdot(u-v)=0\}$$

# Examples
```jldoctest
julia> C = positive_hull([-2 5; 1 0]);

julia> H = hilbert_basis(C);

julia> toric_ideal(H, QQ)
ideal(x2*x3 - x4^2, -x1*x3 + x2^2*x4, -x1*x4 + x2^3, -x1*x3^2 + x2*x4^3, -x1*x3^3 + x4^5)
```
"""
function toric_ideal(pts::fmpz_mat, coefficient_ring::AbstractAlgebra.Ring)
    intkernel = kernel(pts, side=:left)
    intkernel = intkernel[2]
    presat = binomial_exponents_to_ideal(intkernel, coefficient_ring)
    J = ideal([prod(gens(base_ring(presat)))])
    return saturation(presat, J)
end

toric_ideal(pts::Union{AbstractMatrix,SubObjectIterator}, coefficient_ring::AbstractAlgebra.Ring) = toric_ideal(matrix(ZZ, pts), coefficient_ring::AbstractAlgebra.Ring)
