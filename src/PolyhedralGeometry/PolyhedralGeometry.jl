const AnyVecOrMat = Union{MatElem, AbstractVecOrMat}


include("helpers.jl")
include("iterators.jl")
include("Polyhedron/constructors.jl")
include("Cone/constructors.jl")
include("Cone/properties.jl")
include("Cone/standard_constructions.jl")
include("Polyhedron/properties.jl")
include("Polyhedron/standard_constructions.jl")
include("PolyhedralFan/constructors.jl")
include("PolyhedralFan/properties.jl")
include("PolyhedralFan/standard_constructions.jl")
include("PolyhedralComplex/constructors.jl")
include("PolyhedralComplex/properties.jl")
include("PolyhedralComplex/standard_constructions.jl")
include("SubdivisionOfPoints/constructors.jl")
include("SubdivisionOfPoints/properties.jl")
include("SubdivisionOfPoints/functions.jl")
include("linear_program.jl")
include("mixed_integer_linear_program.jl")
include("LP_file_format.jl")
include("groups.jl")
include("type_functions.jl")
include("visualization.jl")
include("solving_integrally.jl")
include("triangulations.jl")


# Some temporary aliases to avoid breaking all current PRs
pm_cone(C::Cone) = pm_object(C)
pm_fan(PF::PolyhedralFan) = pm_object(PF)
pm_subdivision(SOP::SubdivisionOfPoints) = pm_object(SOP)
pm_polytope(P::Polyhedron) = pm_object(P)
