export katsura

function _get_katsura_exponent(n::Int64, m::Int64, l::Int64)
    e = zeros(Int64, n + 1)
    if abs(l) == abs(m - l)
        e[abs(l) + 1] = 2
    else
        e[abs(l) + 1] = 1
        e[abs(m - l) + 1] = 1
    end

    return e
end

@doc Markdown.doc"""
katsura(n::Int64)

Given a natural number `n` returns the Katsura ideal generated by
$  u_m - \sum_{l = -N}^{N}u_{l - m}u_l$, $1 - \sum_{l = -N}^{N}u_l $
where $u_{-i} = u_i$, and $u_i = 0$ for $i > N$. Also note that indices
have been shifted to start from 1.
"""
function katsura(n::Int64)
    R, x = PolynomialRing(ZZ, n + 1)
    polys = Vector{fmpz_mpoly}()
    coeffs_vec = 2 * ones(fmpz, n + 1)
    coeffs_vec[1] = 1
    mono_exps = Matrix{Int64}(identity_matrix(ZZ, n + 1))
    linear_poly = R(coeffs_vec, [mono_exps[:, i] for i in 1:ncols(mono_exps)])
    linear_poly -= 1
    push!(polys, linear_poly)
    
    for m in 0:n - 1
        polynomial = MPolyBuildCtx(R)
        for l in -n:n
            if abs(l) > n || abs(m - l) > n 
                continue
            end
            e = _get_katsura_exponent(n, m, l)
            push_term!(polynomial, ZZ(1), e)
        end

        e = zeros(Int64, n + 1)
        e[abs(m) + 1] = 1
        push_term!(polynomial, ZZ(-1), e)
        poly = finish(polynomial)
        push!(polys, poly)
    end

    return ideal(R, polys)
end
