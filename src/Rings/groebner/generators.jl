@doc raw"""
    groebner_assure(I::MPolyIdeal, complete_reduction::Bool = false, need_global::Bool = false)
    groebner_assure(I::MPolyIdeal, ordering::MonomialOrdering, complete_reduction::Bool = false)

**Note**: Internal function, subject to change, do not use.

Given an ideal `I` in a multivariate polynomial ring this function assures that a
Gröbner basis w.r.t. the given monomial ordering is attached to `I` in `I.gb`.
It *currently* also ensures that the basis is defined on the Singular side in
`I.gb.S`, but this should not be relied upon: use `singular_assure(I.gb)` before
accessing `I.gb.S`.

# Examples
```jldoctest
julia> R,(x,y) = polynomial_ring(QQ, [:x,:y])
(Multivariate polynomial ring in 2 variables over QQ, QQMPolyRingElem[x, y])

julia> I = ideal([x*y-3*x,y^3-2*x^2*y])
Ideal generated by
  x*y - 3*x
  -2*x^2*y + y^3

julia> Oscar.groebner_assure(I, degrevlex(R));

julia> I.gb[degrevlex(R)]
Gröbner basis with elements
  1: x*y - 3*x
  2: y^3 - 6*x^2
  3: 2*x^3 - 9*x
with respect to the ordering
  degrevlex([x, y])
```
"""
function groebner_assure(I::MPolyIdeal, complete_reduction::Bool = false, need_global::Bool = false)
  if !isempty(I.gb)
    for G in values(I.gb)
      need_global || return G
      is_global(G.ord) || continue
      complete_reduction || return G
      if !G.isReduced
        I.gb[G.ord] = _compute_standard_basis(G, G.ord, true)
      end
      return I.gb[G.ord]
    end
  end
  ord = default_ordering(base_ring(I))
  (need_global <= is_global(ord)) || error("Monomial ordering must be global.")
  I.gb[ord] = groebner_assure(I, ord, complete_reduction)
  return I.gb[ord]
end

function groebner_assure(I::MPolyIdeal, ordering::MonomialOrdering, complete_reduction::Bool = false)
    return get!(I.gb, ordering) do
        _compute_standard_basis(I.gens, ordering, complete_reduction)
    end
end

function oscar_groebner_generators(I::MPolyIdeal, ordering::MonomialOrdering = default_ordering(base_ring(I)), complete_reduction::Bool = false)
  standard_basis(I, ordering=ordering, complete_reduction = complete_reduction)
  oscar_assure(I.gb[ordering])
  return I.gb[ordering].gens.O
end

function singular_groebner_generators(I::MPolyIdeal, ordering::MonomialOrdering = default_ordering(base_ring(I)), complete_reduction::Bool = false)
  standard_basis(I, ordering=ordering, complete_reduction = complete_reduction)
  return singular_generators(I.gb[ordering], ordering)
end

function singular_groebner_generators(I::MPolyIdeal, complete_reduction::Bool, need_global::Bool)
  G = groebner_assure(I, complete_reduction, need_global)
  return singular_generators(G, G.ord)
end
