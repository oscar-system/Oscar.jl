################################################################################
#
#  Initial forms and initial ideals
#  ================================
#
################################################################################



################################################################################
#
#  Caching of polynomial rings over residue fields
#
################################################################################
function get_polynomial_ring_for_initial(R::MPolyRing, nu::TropicalSemiringMap)
    @req coefficient_ring(R)==valued_field(nu) "coefficient ring is not valued field"

    polynomialRingsForInitial = get_attribute!(R, :tropical_geometry_polynomial_rings_for_initial) do
        return Dict{TropicalSemiringMap,MPolyRing}()
    end::Dict{TropicalSemiringMap,MPolyRing}
    return get!(polynomialRingsForInitial, nu, first(polynomial_ring(residue_field(nu),symbols(R); cached=false)))
end

# special function for trivial valuation to ensure reusing original ring
function get_polynomial_ring_for_initial(R::MPolyRing, nu::TropicalSemiringMap{K,Nothing,minOrMax}) where {K<:Field, minOrMax<:Union{typeof(min),typeof(max)}}
    @req coefficient_ring(R)==valued_field(nu) "coefficient ring is not valued field"
    return R
end



################################################################################
#
#  Initial form
#
################################################################################
@doc raw"""
    initial(f::MPolyRingElem, nu::TropicalSemiringMap, w::Vector)

Return the initial form of `f` with respect to the tropical semiring map `nu` and weight vector `w`.

# Examples (trivial and $p$-adic valuation)
```jldoctest
julia> R,(x,y) = QQ[:x, :y];

julia> nu_0 = tropical_semiring_map(QQ,max);

julia> nu_2 = tropical_semiring_map(QQ,2);

julia> w = [0,0];

julia> f = x+y+2;

julia> initial(f,nu_2,w) # polynomial over GF(2)
x + y

julia> initial(f,nu_0,w) # polynomial over QQ
x + y + 2

```

# Examples ($t$-adic valuation)
```jldoctest
julia> K,t = rational_function_field(GF(2),"t");

julia> nu_t = tropical_semiring_map(K,t,max);

julia> R,(x,y) = K[:x, :y];

julia> w = [1,1];

julia> f = t*x+t*y+1;

julia> initial(f,nu_t,w) # polynomial over GF(2)
x + y + 1

```
"""
function initial(f::MPolyRingElem, nu::TropicalSemiringMap, w::AbstractVector{<:Union{QQFieldElem,ZZRingElem,Rational,Integer}})
    ###
    # Evaluate the tropicalization of f and all its terms at w,
    # mark the terms which attain the evaluated value
    ###
    coeffs = collect(coefficients(f))
    expvs = collect(exponents(f))
    tropTermsEvaluated = [nu(c)*tropical_semiring(nu)(dot(w,alpha)) for (c,alpha) in zip(coeffs,expvs)]
    tropPolyEvaluated = sum(tropTermsEvaluated)
    termsAttainingValue = findall(isequal(tropPolyEvaluated),tropTermsEvaluated)
    coeffs = coeffs[termsAttainingValue]
    expvs = expvs[termsAttainingValue]

    ###
    # Construct the initial form
    ###
    kx = get_polynomial_ring_for_initial(parent(f),nu)
    initialForm = MPolyBuildCtx(kx)
    for (c,alpha) in zip(coeffs,expvs)
        push_term!(initialForm,initial(c,nu),alpha)
    end
    return finish(initialForm)
end



################################################################################
#
#  Initial ideal
#
################################################################################
@doc raw"""
    initial(I::MPolyIdeal, nu::TropicalSemiringMap, w::Vector; skip_groebner_basis_computation::Bool=false)

Return the initial ideal of `I` with respect to the tropical semiring map `nu` and weight vector `w`.  If `skip_groebner_basis_computation=true`, skips the necessary Groebner basis computation and returns the ideal generated by the initial forms of `gens(I)`.

# Examples
```jldoctest
julia> R,(x,y) = QQ[:x, :y];

julia> I = ideal([x^3-5*x^2*y,3*y^3-2*x^2*y]);

julia> nu_2 = tropical_semiring_map(QQ,2);

julia> nu_0 = tropical_semiring_map(QQ);

julia> w = [0,0];

julia> initial(I,nu_2,w)
Ideal generated by
  x^3 + x^2*y
  y^3

julia> initial(I,nu_0,w)
Ideal generated by
  x^3 - 5*x^2*y
  -2*x^2*y + 3*y^3
```
"""
function initial(I::MPolyIdeal, nu::TropicalSemiringMap, w::AbstractVector{<:Union{QQFieldElem,ZZRingElem,Rational,Integer}}; skip_groebner_basis_computation::Bool=false)
    G = (skip_groebner_basis_computation ? gens(I) : groebner_basis(I,nu,w))
    return ideal(initial.(G,Ref(nu),Ref(w)))
end
