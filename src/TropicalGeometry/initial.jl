################################################################################
#
#  Initial forms and initial ideals
#
################################################################################

@doc raw"""
    initial(f::MPolyRingElem, nu::TropicalSemiringMap, w::Vector; perturbation::Vector=[])

Return the initial form of `f` with respect to the tropical semiring map `nu` and weight vector `w`.

# Examples (trivial and $p$-adic valuation)
```jldoctest
julia> R,(x,y) = QQ["x", "y"];

julia> nu_0 = tropical_semiring_map(QQ,max);

julia> nu_2 = tropical_semiring_map(QQ,2);

julia> w = [0,0];

julia> f = x+y+2;

julia> initial(f,nu_2,w) # polynomial over GF(2)
x + y

julia> initial(f,nu_0,w) # polynomial over QQ
x + y + 2

```

# Examples ($t$-adic valuation)
```jldoctest
julia> K,t = rational_function_field(GF(2),"t");

julia> nu_t = tropical_semiring_map(K,t,max);

julia> R,(x,y) = K["x", "y"];

julia> w = [1,1];

julia> f = t*x+t*y+1;

julia> initial(f,nu_t,w) # polynomial over GF(2)
x + y + 1

```
"""
function initial(f::MPolyRingElem, nu::TropicalSemiringMap, w::Vector{<:Union{QQFieldElem,ZZRingElem,Rational,Integer}}; perturbation::Union{Nothing,Vector{<:Union{QQFieldElem,ZZRingElem,Rational,Integer}}}=nothing)

    ###
    # Evaluate the tropicalization of f and all its terms at w,
    # mark the terms which attain the evaluated value
    ###
    coeffs = collect(coefficients(f))
    expvs = collect(exponents(f))
    tropTermsEvaluated = [nu(c)*dot(w,alpha) for (c,alpha) in zip(coeffs,expvs)]
    tropPolyEvaluated = sum(tropTermsEvaluated)
    termsAttainingValue = findall(isequal(tropPolyEvaluated),tropTermsEvaluated)
    coeffs = coeffs[termsAttainingValue]
    expvs = expvs[termsAttainingValue]

    # if perturbation passed, further filter the marked terms
    if !isnothing(perturbation)
        tropTermsEvaluated = [tropical_semiring(nu)(dot(w,alpha)) for (c,alpha) in zip(coeffs,expvs)]
        tropPolyEvaluated = sum(tropTermsEvaluated)
        termsAttainingValue = findall(isequal(tropPolyEvaluated),tropTermsEvaluated)
        coeffs = coeffs[termsAttainingValue]
        expvs = expvs[termsAttainingValue]
    end

    ###
    # Construct the initial form
    ###
    kx, _ = polynomial_ring(residue_field(nu),symbols(parent(f)))
    initialForm = MPolyBuildCtx(kx)
    for (c,alpha) in zip(coeffs,expvs)
        push_term!(initialForm,initial(c,nu),alpha)
    end
    return finish(initialForm)
end



@doc raw"""
    initial(I::MPolyIdeal, nu::TropicalSemiringMap, w::Vector; skip_groebner_basis_computation::Bool=false)

Return the initial ideal of `I` with respect to the tropical semiring map `nu` and weight vector `w`.  If `skip_groebner_basis_computation=true`, skips the necessary Groebner basis computation and returns the ideal generated by the initial forms of `gens(I)`.

# Examples
```jldoctest
julia> R,(x,y) = QQ["x","y"];

julia> I = ideal([x^3-5*x^2*y,3*y^3-2*x^2*y]);

julia> nu_2 = tropical_semiring_map(QQ,2);

julia> nu_0 = tropical_semiring_map(QQ);

julia> w = [0,0];

julia> initial(I,nu_2,w)
ideal(x^3 + x^2*y, y^3)

julia> initial(I,nu_0,w)
ideal(2*x^2*y - 3*y^3, x^3 - 5*x^2*y, x*y^3 - 5*y^4, y^5)
```
"""
function initial(I::MPolyIdeal, nu::TropicalSemiringMap, w::Vector{<:Union{QQFieldElem,ZZRingElem,Rational,Integer}}; skip_groebner_basis_computation::Bool=false)
    G = (skip_groebner_basis_computation ? gens(G) : groebner_basis(I,nu,w))
    return ideal(initial.(G,Ref(nu),Ref(w)))
end
