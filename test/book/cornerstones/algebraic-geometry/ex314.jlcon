julia> S, x = graded_polynomial_ring(QQ, ["x_0", "x_1", "x_2", "x_3"]);

julia> m3x3 = matrix(S, 3, 3, [(i + j == 4) ? 0 : x[4 - (i + j)] for i in 0:2, j in 0:2])
[x_3   x_2   x_1]
[x_2   x_1   x_0]
[x_1   x_0     0]

julia> f = det(m3x3[1:2, 1:2])
x_1*x_3 - x_2^2

julia> g = det(m3x3)
-x_0^2*x_3 + 2*x_0*x_1*x_2 - x_1^3

julia> leading_term(f)
-x_2^2

julia> leading_term(g)
-x_1^3

julia> J = ideal([f, g]);

julia> p1 = radical(J);

julia> p1 == ideal(minors(m3x3[1:3, 1:2],2))
true

julia> mp1 = ideal_as_module(p1)
Graded submodule of S^1
1 -> (-x_1*x_3 + x_2^2)*e[1]
2 -> (-x_0*x_3 + x_1*x_2)*e[1]
3 -> (-x_0*x_2 + x_1^2)*e[1]
represented as subquotient with no relations

julia> M1, _ = quo(ambient_free_module(mp1), mp1);

julia> M1
Graded subquotient of submodule of S^1 generated by
1 -> e[1]
by submodule of S^1 generated by
1 -> (-x_1*x_3 + x_2^2)*e[1]
2 -> (-x_0*x_3 + x_1*x_2)*e[1]
3 -> (-x_0*x_2 + x_1^2)*e[1]

julia> mJ = ideal_as_module(J);

julia> M, _  = quo(ambient_free_module(mJ),mJ);

julia> homM1M, psi = hom(M1, M);

julia> hom1, tohomM1M = prune_with_map(homM1M);

julia> hom1
Graded subquotient of submodule of S^2 generated by
1 -> e[1]
2 -> e[2]
by submodule of S^2 generated by
1 -> -x_2*e[1] + x_3*e[2]
2 -> x_0*e[1] - x_1*e[2]
3 -> -x_1*e[1] + x_2*e[2]

julia> degrees_of_generators(hom1)
2-element Vector{FinGenAbGroupElem}:
 [2]
 [2]

julia> phi1 = psi(tohomM1M(hom1[1]))
M1 -> M
e[1] -> (-x_0*x_3 + x_1*x_2)*e[1]
Graded module homomorphism of degree [2]


julia> phi2 = psi(tohomM1M(hom1[2]))
M1 -> M
e[1] -> (-x_0*x_2 + x_1^2)*e[1]
Graded module homomorphism of degree [2]


julia> kerphi2, _ = kernel(phi2);

julia> iszero(kerphi2)
true

julia> MmodM1 = cokernel(phi2)
Graded subquotient of submodule of S^1 generated by
1 -> e[1]
by submodule of S^1 generated by
1 -> (x_1*x_3 - x_2^2)*e[1]
2 -> (-x_0^2*x_3 + 2*x_0*x_1*x_2 - x_1^3)*e[1]
3 -> (-x_0*x_2 + x_1^2)*e[1]

julia> p2 = ideal([x[1],x[2],x[3]])
Ideal generated by
  x_0
  x_1
  x_2

julia> f = x[2]*x[3]-x[1]*x[4]
-x_0*x_3 + x_1*x_2

julia> v = f*MmodM1[1];

julia> U, inclU = sub(MmodM1, [v]);

julia> annihilator(U) == p2
true

julia> mp2 = ideal_as_module(p2);

julia> Smodp2, _ = quo(ambient_free_module(mp2), mp2);

julia> homp2M1, tau = hom(Smodp2, MmodM1);

julia> hom2, tohomp2M1 = prune_with_map(homp2M1);

julia> psi = tau(tohomp2M1(hom2[1]));

julia> iszero(kernel(psi)[1])
true

julia> annihilator(cokernel(psi))
Ideal generated by
  -x_1*x_3 + x_2^2
  -x_0*x_3 + x_1*x_2
  -x_0*x_2 + x_1^2

julia> annihilator(cokernel(psi)) == p1
true
