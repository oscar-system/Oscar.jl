julia> K = GF(3);

julia> S, (x0, x1, x2, x3, x4) = graded_polynomial_ring(K, ["x0", "x1", "x2", "x3", "x4"]);

julia> m = ideal(S, [x1^2+(-x1+x2+x3-x4)*x0, x1*x2+(x1-x3+x4)*x0, x1*x3+(-x1+x4+x0)*x0, x1*x4+(-x1+x3+x4-x0)*x0, x2^2+(x1-x2-x4-x0)*x0, x2*x3+(x1-x2+x3+x4-x0)*x0, x2*x4+(x1+x2-x3-x4-x0)*x0, x3^2+(x3+x4-x0)*x0,x3*x4+(-x3-x4+x0)*x0, x4^2+(x1+x3-x4-x0)*x0]);

julia> R, _ = quo(S, m);

julia> FR = free_resolution(R, algorithm = :mres);

julia> L = monomial_basis(R, 2)
5-element Vector{MPolyDecRingElem{FqFieldElem, FqMPolyRingElem}}:
 x4^2
 x3*x4
 x2*x4
 x2*x3
 x1*x4

julia> versal_unfolding = [[i == div((j-1), 5) + 1 ? S(L[(j-1) % 5 + 1]) : S(0) for i in 1:10] for j in 1:50];

julia> function normal_space_generator(FR, A1t)
         phi1 = map(FR, 1)
         e1 = gen(codomain(phi1),1)
         phi2 = map(FR, 2)
         phi3 = map(FR, 3)
         A1 = hom(domain(phi1), codomain(phi1), [p*e1 for p in A1t])
         A1phi2 = phi2 * A1
         A2 = lift(A1phi2, phi1)
         A2phi3 = phi3 * A2
         A3 = lift(A2phi3, phi2)
         A3m = matrix(A3)
         return A3m[1:2, 16:22]
       end;

julia> nlist = [normal_space_generator(FR, v) for v in versal_unfolding];

julia> TS, t = graded_polynomial_ring(K, "t"=>(1:50));

julia> nlist_t = [map_entries(x -> x * t[i], map_entries(constant_coefficient, nlist[i])) for i in 1:50];

julia> B = sum(nlist_t);

julia> tangent_space = ideal(vec(collect(B)));

julia> ngens(leading_ideal(tangent_space))
14
