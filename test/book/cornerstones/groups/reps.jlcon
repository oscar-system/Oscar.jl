julia> function regular_gmodule(F::Field, G::Oscar.GAPGroup)
           FM = free_module(F, order(Int, G));
           gs = gset(G, *, [one(G)])
           return gmodule(G, [hom(FM, FM, permutation_matrix(F, permutation(gs, g))) for g in gens(G)])
       end;

julia> Base.:^(a::T, b::T) where T <: MatElem = inv(b)*a*b

julia> G = dihedral_group(10);

julia> M = regular_gmodule(GF(7), G);

julia> C = composition_factors_with_multiplicity(M)
3-element Vector{Any}:
 (G-module for G acting on vector space of dimension 1 over GF(7), 1)
 (G-module for G acting on vector space of dimension 1 over GF(7), 1)
 (G-module for G acting on vector space of dimension 4 over GF(7), 2)

julia> [is_absolutely_irreducible(x[1]) for x in C]
3-element Vector{Bool}:
 1
 1
 0

julia> phi = embed(GF(7), splitting_field(C[3][1]))
Morphism of finite fields
  from prime field of characteristic 7
  to finite field of degree 2 and characteristic 7

julia> M = extension_of_scalars(C[3][1], phi)
G-module for G acting on vector space of dimension 4 over GF(7, 2)

julia> composition_factors_with_multiplicity(M)
2-element Vector{Any}:
 (G-module for G acting on vector space of dimension 2 over GF(7, 2), 1)
 (G-module for G acting on vector space of dimension 2 over GF(7, 2), 1)

julia> G = pc_group(symmetric_group(4));

julia> C = abelian_closure(QQ)[1];

julia> F = free_module(C, 1);

julia> s, ms = sub(G, [G[3], G[4]]);   # subgroup generated by c, d

julia> T = trivial_gmodule(s, F);

julia> z = root_of_unity(C, 3);

julia> ss, mss = sub(G, [G[2], G[3], G[4]]);

julia> M = gmodule(ss, [hom(F, F, [z*F[1]]), action(T, s[1]), action(T, s[2])])
G-module for ss acting on F

julia> FF = free_module(C, 2);

julia> zm = 0*matrix(action(M, one(ss)));

julia> im = [hom(FF, FF, [matrix(action(M, x)) zm; zm matrix(action(M, preimage(mss, mss(x)^G[1])))]) for x in gens(ss)];

julia> pushfirst!(im, hom(FF, FF, matrix(C, [0 1; 1 0])));

julia> phi = gmodule(G, im);

julia> character(phi)
class_function(character table of G, QQAbElem{AbsSimpleNumFieldElem}[2, 0, -1, 2, 0])

julia> schur_index(ans)
1

julia> T = matrix(C, [C(1) -z; z+1 z]);

julia> [matrix(x)^T for x in action(phi)]
4-element Vector{AbstractAlgebra.Generic.MatSpaceElem{QQAbElem{AbsSimpleNumFieldElem}}}:
 [1 0; -1 -1]
 [0 1; -1 -1]
 [1 0; 0 1]
 [1 0; 0 1]
