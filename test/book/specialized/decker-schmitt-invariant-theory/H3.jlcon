julia> K, a = cyclotomic_field(3, "a");

julia> S = matrix(K, [0 0 1; 1 0 0; 0 1 0])
[0   0   1]
[1   0   0]
[0   1   0]

julia> T = matrix(K, [1 0 0; 0 a 0; 0 0 -a-1])
[1   0        0]
[0   a        0]
[0   0   -a - 1]

julia> H3 = matrix_group(S, T)
Matrix group of degree 3
  over cyclotomic field of order 3

julia> order(H3)
27

julia> exponent(H3)
3

julia> is_abelian(H3)
false

julia> R, (x, y, z) = graded_polynomial_ring(K, ["x", "y", "z"]);

julia> RH3 = invariant_ring(R, H3);

julia> MSH3 = molien_series(RH3)
(-t^6 + t^3 - 1)//(t^9 - 3*t^6 + 3*t^3 - 1)

julia> expand(MSH3, 10)
1 + 2*t^3 + 4*t^6 + 7*t^9 + O(t^11)

julia> P = basis(RH3, 3)
2-element Vector{MPolyDecRingElem{AbsSimpleNumFieldElem, AbstractAlgebra.Generic.MPoly{AbsSimpleNumFieldElem}}}:
 x*y*z
 x^3 + y^3 + z^3

julia> MP = minimal_primes(ideal(R, P));

julia> length(MP)
9

julia> [[ kernel(reduce(hcat, [ K[coeff(p, x); coeff(p, y); coeff(p, z)] for p in gens(Q) ])) for Q in MP ]]
1-element Vector{Vector{AbstractAlgebra.Generic.MatSpaceElem{AbsSimpleNumFieldElem}}}:
 [[a+1 0 1], [-a 0 1], [-1 0 1], [0 a+1 1], [0 -a 1], [0 -1 1], [-a 1 0], [a+1 1 0], [-1 1 0]]

julia> T, t = polynomial_ring(QQ, "t")
(Univariate polynomial ring in t over QQ, t)

julia> RR, (X, Y, Z) = graded_polynomial_ring(T, [ "X", "Y", "Z"]);

julia> F = X^3+Y^3+Z^3;

julia> G = t*F+hessian(F);

julia> L = syzygy_generators([hessian(G), F, hessian(F)]);

julia> collect(coefficients(L[1]))
3-element Vector{QQPolyRingElem}:
 1
 279936*t
 -t^3 - 93312

julia> C, iC = center(H3);

julia> gens(C)[1]
[-a - 1        0        0]
[     0   -a - 1        0]
[     0        0   -a - 1]

julia> Q, pQ = quo(H3, C)
(Pc group of order 9, Hom: H3 -> Q)

julia> describe(Q)
"C3 x C3"

julia> SSG = filter(cls -> order(representative(cls)) == 3 && length(cls) == 3, subgroup_classes(H3));

julia> length(SSG)
4

julia> L1 = [basis(invariant_ring(R, H), 1)[1] for H in collect(SSG[1])]
3-element Vector{MPolyDecRingElem{AbsSimpleNumFieldElem, AbstractAlgebra.Generic.MPoly{AbsSimpleNumFieldElem}}}:
 x + y + z
 x + (-a - 1)*y + a*z
 x + a*y + (-a - 1)*z

julia> Triangle1 = L1[1]*L1[2]*L1[3]
x^3 - 3*x*y*z + y^3 + z^3
