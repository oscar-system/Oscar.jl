julia> R, (t1, t2) = polynomial_ring(QQ, ["t1", "t2"]);

julia> psi = [rand(R, 6:6, 3:5, -10:10) for _ in 1:3]
3-element Vector{QQMPolyRingElem}:
 1//2*t1^5*t2^3 - 2*t1^3*t2^4 + 2//9*t1^3*t2^3
 -3//5*t1^5*t2^5 - 8//7*t1^3*t2^4 - 17//4*t1^3*t2^3
 -23//12*t1^5*t2^5 - 3//7*t1^4*t2^3 - 13//6*t1^3*t2^5 - 9*t1^3*t2^4

julia> D = sum([(f - rand(Int))^2 for f in psi]);

julia> J = jacobian_ideal(D);

julia> S, (t1, t2, s) = polynomial_ring(QQ, ["t1", "t2", "s"]);

julia> phi = hom(R, S, [t1, t2]);

julia> f = sum([rand(Int) * p for p in minors(jacobian_matrix(psi), 2)]);

julia> JJ = phi(J) + ideal(S, s*phi(f) - 1);

julia> sols, param = real_solutions(JJ);

julia> length(sols)
8

julia> degree(param.elim)
62
