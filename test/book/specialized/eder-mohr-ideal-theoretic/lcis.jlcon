julia> R, (x, y, z) = polynomial_ring(QQ, ["x", "y", "z"]);

julia> I = ideal(R, [x*y, x*z, y*z]);

julia> conorm = subquotient(matrix(gens(I)), matrix(gens(I^2)))
Subquotient of Submodule with 3 generators
1 -> x*y*e[1]
2 -> x*z*e[1]
3 -> y*z*e[1]
by Submodule with 6 generators
1 -> x^2*y^2*e[1]
2 -> x^2*y*z*e[1]
3 -> x*y^2*z*e[1]
4 -> x^2*z^2*e[1]
5 -> x*y*z^2*e[1]
6 -> y^2*z^2*e[1]

julia> fitting_ideal(conorm, 1)
Ideal generated by
  y*z
  x*z
  x*y

julia> fitting_ideal(conorm, 2)
Ideal generated by
  z
  y
  x

julia> equidimensional_decomposition_weak(I)
1-element Vector{MPolyIdeal{QQMPolyRingElem}}:
 Ideal (x*y, x*z, y*z)

julia> F = fitting_ideal(ideal_as_module(I), 2);

julia> codim(F) >= codim(I) + 1
true

julia> I1 = ideal(R, [x-1, y-1]);

julia> I2 = ideal(R, [x, y, z]);

julia> I = intersect(I1, I2);

julia> conorm = subquotient(matrix(gens(I)), matrix(gens(I^2)));

julia> Pk(conorm, k) = saturation(I, fitting_ideal(conorm, k)) + fitting_ideal(conorm, k-1);

julia> Pk(conorm, 2) == ideal(R, [x-1,y-1])
true

julia> Pk(conorm, 3) == ideal(R, [z,y,x])
true
