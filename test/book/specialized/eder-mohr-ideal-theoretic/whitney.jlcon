julia> R, (x, y, z, w) = graded_polynomial_ring(QQ, ["x","y","z","w"]);

julia> f = y^2*w^2 + z^3*w - x^2*z^2;

julia> J = jacobian_matrix(f)
[          -2*x*z^2]
[           2*y*w^2]
[-2*x^2*z + 3*z^2*w]
[     2*y^2*w + z^3]

julia> I_sing = ideal(R, [f, minors(J, 1)...])
Ideal generated by
  -x^2*z^2 + y^2*w^2 + z^3*w
  -2*x*z^2
  2*y*w^2
  -2*x^2*z + 3*z^2*w
  2*y^2*w + z^3

julia> minimal_primes(I_sing)
2-element Vector{MPolyIdeal{MPolyDecRingElem{QQFieldElem, QQMPolyRingElem}}}:
 Ideal (w, z)
 Ideal (z, y)

julia> (comp -> comp[2]).(primary_decomposition(I_sing))
6-element Vector{MPolyIdeal{MPolyDecRingElem{QQFieldElem, QQMPolyRingElem}}}:
 Ideal (w, z)
 Ideal (z, y)
 Ideal (w, z, y)
 Ideal (w, z, x)
 Ideal (z, y, x)
 Ideal (x, y, z, w)

julia> R, (x0,x1,x2,x3,a0,a1,a2,a3) = polynomial_ring(QQ, ["x0","x1","x2","x3","a0","a1","a2","a3"]);

julia> f = x0^6 + x0^4*x1*x2 + x2^3*x3^3;

julia> J = jacobian_matrix(f)[1:4, 1:1]
[6*x0^5 + 4*x0^3*x1*x2]
[              x0^4*x2]
[x0^4*x1 + 3*x2^2*x3^3]
[          3*x2^3*x3^2]

julia> JJ = hcat(J, R[a0; a1; a2; a3])
[6*x0^5 + 4*x0^3*x1*x2   a0]
[              x0^4*x2   a1]
[x0^4*x1 + 3*x2^2*x3^3   a2]
[          3*x2^3*x3^2   a3]

julia> id = ideal(R, minors(JJ, 2));

julia> I_sing = ideal(R, minors(J, 1));

julia> conorm = saturation(ideal(R, f) + id, I_sing);

julia> Y = radical(ideal(R,f) + I_sing)
Ideal generated by
  x0
  x2*x3

julia> id_fib_Y = saturation(conorm + Y, ideal(R, [x0,x1,x2,x3]));

julia> prim_comps = (comp -> comp[2]).(primary_decomposition(id_fib_Y));

julia> [eliminate(comp, [a0,a1,a2,a3]) for comp in prim_comps]
6-element Vector{MPolyIdeal{QQMPolyRingElem}}:
 Ideal (x2, x0)
 Ideal (x3, x2, x0)
 Ideal (x3, x0)
 Ideal (x3, x2, x0)
 Ideal (x3, x1, x0)
 Ideal (x2, x0, 4*x1^3 + 27*x3^3)
